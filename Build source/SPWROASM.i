/*
	SPWROASM.i
	Copyright (C) 2007 Paul C. Pratt

	You can redistribute this file and/or modify it under the terms
	of version 2 of the GNU General Public License as published by
	the Free Software Foundation.  You should have received a copy
	of the license along with this file; see the file COPYING.

	This file is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	license for more details.
*/

/*
	program SPecific WRite Optional ASseMbly code
*/

#pragma segment ASMgen

LOCALPROC WriteImportAProc(char *s)
{
	if (cur_ide == gbk_ide_xcd) {
		WriteBlankLineToDestFile();
		WriteDestFileLn(".data");
		WriteDestFileLn(".symbol_stub");

		WriteBgnDestFileLn();
		WriteCStrToDestFile("L_");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("$stub:");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\t.indirect_symbol _");
		WriteCStrToDestFile(s);
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\tlis r11,ha16(L_");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("$lazy_ptr)");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\tlwz r12,lo16(L_");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("$lazy_ptr)(r11)");
		WriteEndDestFileLn();

		WriteDestFileLn("\tmtctr r12");

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\taddi r11,r11,lo16(L_");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("$lazy_ptr)");
		WriteEndDestFileLn();

		WriteDestFileLn("\tbctr");
		WriteDestFileLn(".data");
		WriteDestFileLn(".lazy_symbol_pointer");

		WriteBgnDestFileLn();
		WriteCStrToDestFile("L_");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("$lazy_ptr:");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\t.indirect_symbol _");
		WriteCStrToDestFile(s);
		WriteEndDestFileLn();

		WriteDestFileLn("\t.long dyld_stub_binding_helper");
	} else if (cur_ide == gbk_ide_bgc) {
		/* nothing needed */
	} else {
		WriteBlankLineToDestFile();
		++DestFileIndent;

		WriteBgnDestFileLn();
		WriteCStrToDestFile("import\t.");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[PR]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("import\t");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[DS]");
		WriteEndDestFileLn();

		WriteDestFileLn("toc");

		WriteBgnDestFileLn();
		WriteCStrToDestFile("tc\t");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[TC],");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[DS]");
		WriteEndDestFileLn();

		--DestFileIndent;
	}
}

LOCALPROC CallImportedProc(char *s)
{
	++DestFileIndent;
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("bl\t.");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[PR]");
		WriteEndDestFileLn();
		WriteDestFileLn("Nop");
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("bl");
		WriteCStrToDestFile("\t");
		if (cur_ide != gbk_ide_bgc) {
			WriteCStrToDestFile("L_");
			WriteCStrToDestFile(s);
			WriteCStrToDestFile("$stub");
		} else {
			WriteCStrToDestFile(s);
		}
		WriteEndDestFileLn();
	}
	--DestFileIndent;
}

LOCALPROC WriteExportAProc(char *s)
{
	if (cur_ide == gbk_ide_mpw) {
		WriteBlankLineToDestFile();
		++DestFileIndent;
		WriteDestFileLn("toc");

		WriteBgnDestFileLn();
		WriteCStrToDestFile("tc\t");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[TC],");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[DS]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("csect\t");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[DS]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("dc.l\t.");
		WriteCStrToDestFile(s);
		WriteEndDestFileLn();

		WriteDestFileLn("dc.l\tTOC[tc0]");
		--DestFileIndent;
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("\t.globl ");
		if (cur_ide != gbk_ide_bgc) {
			WriteCStrToDestFile("_");
		}
		WriteCStrToDestFile(s);
		WriteEndDestFileLn();
	}
}

LOCALPROC WriteAGlobalLabel(char *s, int align)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();

	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("\texport\t.");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[PR]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\texport\t");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[DS]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\tcsect\t.");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile("[PR]");
		if (5 == align) {
			WriteCStrToDestFile(", 5");
		}
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile(".");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(":");
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		if (5 == align) {
			WriteCStrToDestFile("\t.align 5");
		} else {
			WriteCStrToDestFile("\t.align 2");
		}
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		if (cur_ide != gbk_ide_bgc) {
			WriteCStrToDestFile("_");
		}
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(":");
		WriteEndDestFileLn();
	}
}

LOCALPROC WriteALocalLabel(char *s)
{
	WriteBgnDestFileLn();
	WriteCStrToDestFile(".");
	WriteCStrToDestFile(s);
	WriteCStrToDestFile(":");
	WriteEndDestFileLn();
}

LOCALPROC WriteLoadVarAddr(char *reg, char *v)
{
	++DestFileIndent;
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("lwz\t");
		WriteCStrToDestFile(reg);
		WriteCStrToDestFile(", .");
		WriteCStrToDestFile(v);
		WriteCStrToDestFile("[TC](rtoc)");
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("lis");
		WriteCStrToDestFile("\t");
		WriteCStrToDestFile(reg);
		WriteCStrToDestFile(", ");
		if (cur_ide == gbk_ide_bgc) {
			WriteCStrToDestFile(".");
			WriteCStrToDestFile(v);
			WriteCStrToDestFile("@ha");
		} else {
			WriteCStrToDestFile("ha16(.");
			WriteCStrToDestFile(v);
			WriteCStrToDestFile(")");
		}
		WriteEndDestFileLn();
		WriteBgnDestFileLn();
		WriteCStrToDestFile("la");
		WriteCStrToDestFile("\t");
		WriteCStrToDestFile(reg);
		WriteCStrToDestFile(", ");
		if (cur_ide == gbk_ide_bgc) {
			WriteCStrToDestFile(".");
			WriteCStrToDestFile(v);
			WriteCStrToDestFile("@l");
		} else {
			WriteCStrToDestFile("lo16(.");
			WriteCStrToDestFile(v);
			WriteCStrToDestFile(")");
		}
		WriteCStrToDestFile("(");
		WriteCStrToDestFile(reg);
		WriteCStrToDestFile(")");
		WriteEndDestFileLn();
	}
	--DestFileIndent;
}


LOCALPROC WriteNormInstr(char *ins, char *args)
{
	++DestFileIndent;
	WriteBgnDestFileLn();
	WriteCStrToDestFile(ins);
	WriteCStrToDestFile("\t");
	WriteCStrToDestFile(args);
	WriteEndDestFileLn();
	--DestFileIndent;
}

LOCALPROC WriteNormalAsmComment(char *s)
{
	WriteBgnDestFileLn();
	if (cur_ide == gbk_ide_bgc) {
		WriteCStrToDestFile("# ");
	} else {
		WriteCStrToDestFile("; ");
	}
	WriteCStrToDestFile(s);
	WriteEndDestFileLn();
}

LOCALPROC WriteAsmIndentComment(char *s)
{
	++DestFileIndent;
	++DestFileIndent;
	WriteNormalAsmComment(s);
	--DestFileIndent;
	--DestFileIndent;
}

LOCALPROC WriteAsmInstrComment(char *s)
{
	++DestFileIndent;
	WriteNormalAsmComment(s);
	--DestFileIndent;
}

LOCALPROC WriteNormNoArgInstr(char *ins)
{
	++DestFileIndent;
	WriteBgnDestFileLn();
	WriteCStrToDestFile(ins);
	WriteEndDestFileLn();
	--DestFileIndent;
}

LOCALPROC WriteRegEquate(char *newname, char *oldname)
{
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(newname);
		WriteCStrToDestFile("\tEQU\t");
		WriteCStrToDestFile(oldname);
		WriteEndDestFileLn();
	} else if (cur_ide == gbk_ide_bgc) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(newname);
		WriteCStrToDestFile(" = ");
		WriteCStrToDestFile(oldname);
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile("#define ");
		WriteCStrToDestFile(newname);
		WriteCStrToDestFile(" ");
		WriteCStrToDestFile(oldname);
		WriteEndDestFileLn();
	}
}

LOCALPROC WriteAlign4(void)
{
	++DestFileIndent;
	if (cur_ide == gbk_ide_mpw) {
		WriteDestFileLn("align\t4");
	} else {
		WriteDestFileLn(".align\t4");
	}
	--DestFileIndent;
}

LOCALVAR int FieldOffsetCounter;

LOCALPROC WriteBeginLocalData(void)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("---- local data -----------");
	WriteBlankLineToDestFile();
	if (cur_ide == gbk_ide_mpw) {
		++DestFileIndent;
		WriteDestFileLn("toc");
		WriteDestFileLn("tc\t.b2regs9999[TC],.b2regs9999[RW]");
		WriteDestFileLn("csect\t.b2regs9999[RW], 3");
		--DestFileIndent;
	} else {
		FieldOffsetCounter = 0;
#if 0
		WriteDestFileLn(".data");
		WriteDestFileLn("\t.align 2");
		WriteALocalLabel("b2regs9999");
#endif
	}
	WriteBlankLineToDestFile();
}

LOCALPROC WriteEndLocalData(void)
{
	if (cur_ide != gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(".lcomm\t.b2regs9999, ");
		WriteUnsignedToOutput(FieldOffsetCounter);
		WriteCStrToDestFile(", 4");
		WriteEndDestFileLn();
	}
}

LOCALPROC DeclareFieldLong(char *s, char *record)
{
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(": equ $-.");
		WriteCStrToDestFile(record);
		WriteCStrToDestFile("[RW]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\tds.l\t1");
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(".set ");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(", ");
		WriteUnsignedToOutput(FieldOffsetCounter);
		FieldOffsetCounter += 4;
#if 0
		WriteCStrToDestFile(".-.");
		WriteCStrToDestFile(record);
#endif
		WriteEndDestFileLn();

#if 0
		WriteBgnDestFileLn();
		WriteCStrToDestFile("\t.long 0");
		WriteEndDestFileLn();
#endif
	}
}

LOCALPROC DeclareFieldByte(char *s, char *record)
{
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(": equ $-.");
		WriteCStrToDestFile(record);
		WriteCStrToDestFile("[RW]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\tds.b\t1");
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(".set ");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(", ");
		WriteUnsignedToOutput(FieldOffsetCounter);
		FieldOffsetCounter += 2;
#if 0
		WriteCStrToDestFile(".-.");
		WriteCStrToDestFile(record);
#endif
		WriteEndDestFileLn();

#if 0
		WriteBgnDestFileLn();
		WriteCStrToDestFile("\t.byte 0");
		WriteEndDestFileLn();
#endif
	}
}

LOCALPROC DeclareFieldOfSize(char *s, char *record, uimr n)
{
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(": equ $-.");
		WriteCStrToDestFile(record);
		WriteCStrToDestFile("[RW]");
		WriteEndDestFileLn();

		WriteBgnDestFileLn();
		WriteCStrToDestFile("\tds.b\t");
		WriteUnsignedToOutput(n);
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(".set ");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(", ");
		WriteUnsignedToOutput(FieldOffsetCounter);
		FieldOffsetCounter += n;
#if 0
		WriteCStrToDestFile(".-.");
		WriteCStrToDestFile(record);
#endif
		WriteEndDestFileLn();

#if 0
		WriteBgnDestFileLn();
		WriteCStrToDestFile("\t.long 0");
		WriteEndDestFileLn();
#endif
	}
}

LOCALPROC DefineDispatchField(char *s)
{
	++DestFileIndent;
		WriteBgnDestFileLn();
		if (cur_ide == gbk_ide_mpw) {
			WriteCStrToDestFile("dc.l\t.");
		} else {
			WriteCStrToDestFile(".long\t.");
		}
		WriteCStrToDestFile(s);
		WriteEndDestFileLn();
	--DestFileIndent;
}

LOCALPROC DeclareFieldOffset(char *s, char *record)
{
	WriteBlankLineToDestFile();
	if (cur_ide == gbk_ide_mpw) {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(": equ $-.");
		WriteCStrToDestFile(record);
		WriteCStrToDestFile("[RW]");
		WriteEndDestFileLn();
	} else {
		WriteBgnDestFileLn();
		WriteCStrToDestFile(".set ");
		WriteCStrToDestFile(s);
		WriteCStrToDestFile(", .-.");
		WriteCStrToDestFile(record);
		WriteEndDestFileLn();
	}
}

LOCALPROC WrOpPPC_blr(void)
{
	WriteNormNoArgInstr("blr");
}

LOCALPROC WriteBeginAsmCode(void)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("begin code");
	if (cur_ide != gbk_ide_mpw) {
		WriteBlankLineToDestFile();
		WriteDestFileLn(".text");
	}
}

#pragma segment ASMgen0

LOCALPROC WritePPCasmMINEM68K0(void)
{
	WriteNormalAsmComment("MINEM68K.s");
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("Copyright (C) 2004 Paul C. Pratt");
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("You can redistribute this file and/or modify it under the terms");
	WriteNormalAsmComment("of version 2 of the GNU General Public License as published by");
	WriteNormalAsmComment("the Free Software Foundation.  You should have received a copy");
	WriteNormalAsmComment("of the license along with this file; see the file COPYING.");
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("This file is distributed in the hope that it will be useful,");
	WriteNormalAsmComment("but WITHOUT ANY WARRANTY; without even the implied warranty of");
	WriteNormalAsmComment("MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the");
	WriteNormalAsmComment("license for more details.");
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("PowerPC assembler version of MINEM68K.c");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("imports");
	WriteImportAProc("MM_Access");
	WriteImportAProc("customreset");
	WriteImportAProc("get_real_address");
	WriteImportAProc("M68KITAB_setup");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("exports");
	WriteBlankLineToDestFile();
	WriteExportAProc("DiskInsertedPsuedoException");
	WriteExportAProc("m68k_IPLchangeNtfy");
	WriteExportAProc("GetInstructionsRemaining");
	WriteExportAProc("SetInstructionsRemaining");
	WriteExportAProc("m68k_reset");
	WriteExportAProc("MINEM68K_Init");
	WriteExportAProc("m68k_go_nInstructions");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("---- register usage -----------");

	if (cur_ide == gbk_ide_bgc) {
		int i;

		WriteBlankLineToDestFile();
		for (i = 0; i < 32; i++) {
			WriteBgnDestFileLn();
			WriteCStrToDestFile("r");
			WriteUnsignedToOutput(i);
			WriteCStrToDestFile(" = ");
			WriteUnsignedToOutput(i);
			WriteEndDestFileLn();
		}
	}

	WriteBlankLineToDestFile();
	if (cur_ide == gbk_ide_mpw) {
		WriteNormalAsmComment("r1 - stack ptr");
	} else {
		WriteRegEquate("sp", "r1");
	}
	WriteNormalAsmComment("r2 - toc");
	WriteNormalAsmComment("r3 - return address");
	WriteNormalAsmComment("r4:r10 - parameter passing");
	WriteNormalAsmComment("r11:r12 - temp");
	WriteBlankLineToDestFile();
	WriteRegEquate("rPC_p", "r13");
	WriteRegEquate("rOpCode", "r14");
	WriteRegEquate("rOpSize", "r15");
	WriteRegEquate("rBankReadAddr", "r16");
	WriteRegEquate("rBankWritAddr", "r17");
	WriteRegEquate("rMaxInstrsToGo", "r18");
	WriteRegEquate("rRegs", "r19");
	WriteRegEquate("rFlag_c", "r20");
	WriteRegEquate("rFlag_z", "r21");
	WriteRegEquate("rFlag_n", "r22");
	WriteRegEquate("rFlag_v", "r23");
	WriteRegEquate("rFlag_x", "r24");
	WriteRegEquate("rDispatches", "r25");
	WriteRegEquate("rArgKind", "r26");
	WriteRegEquate("rArgAddr", "r27");

	WriteBeginLocalData();
	DeclareFieldLong("fReg_D0", "b2regs9999");
	DeclareFieldLong("fReg_D1", "b2regs9999");
	DeclareFieldLong("fReg_D2", "b2regs9999");
	DeclareFieldLong("fReg_D3", "b2regs9999");
	DeclareFieldLong("fReg_D4", "b2regs9999");
	DeclareFieldLong("fReg_D5", "b2regs9999");
	DeclareFieldLong("fReg_D6", "b2regs9999");
	DeclareFieldLong("fReg_D7", "b2regs9999");
	DeclareFieldLong("fReg_A0", "b2regs9999");
	DeclareFieldLong("fReg_A1", "b2regs9999");
	DeclareFieldLong("fReg_A2", "b2regs9999");
	DeclareFieldLong("fReg_A3", "b2regs9999");
	DeclareFieldLong("fReg_A4", "b2regs9999");
	DeclareFieldLong("fReg_A5", "b2regs9999");
	DeclareFieldLong("fReg_A6", "b2regs9999");
	DeclareFieldLong("fReg_A7", "b2regs9999");
	DeclareFieldLong("fReg_usp", "b2regs9999");
	DeclareFieldLong("fReg_isp", "b2regs9999");
	DeclareFieldLong("fReg_pc", "b2regs9999");
	DeclareFieldLong("fReg_intmask", "b2regs9999");
	DeclareFieldByte("fReg_t1", "b2regs9999");
	DeclareFieldByte("fReg_s", "b2regs9999");
	DeclareFieldByte("fnot_Reg_m", "b2regs9999");
	WriteAsmInstrComment("not on 68000");
	DeclareFieldByte("fReg_Pad0", "b2regs9999");
	DeclareFieldByte("fReg_TracePend", "b2regs9999");
	DeclareFieldByte("fReg_ExtIntPend", "b2regs9999");
	DeclareFieldByte("fReg_c", "b2regs9999");
	DeclareFieldByte("fReg_z", "b2regs9999");
	DeclareFieldByte("fReg_n", "b2regs9999");
	DeclareFieldByte("fReg_v", "b2regs9999");
	DeclareFieldByte("fReg_x", "b2regs9999");
	DeclareFieldByte("fReg_Pad1", "b2regs9999");
	DeclareFieldLong("fReg_pc_p", "b2regs9999");
	DeclareFieldLong("fReg_pc_oldp", "b2regs9999");
	DeclareFieldLong("fReg_MaxInstrs", "b2regs9999");
	DeclareFieldLong("fReg_MoreInstrs", "b2regs9999");
	DeclareFieldLong("fReg_RgLstTmp", "b2regs9999");
	DeclareFieldLong("fBankReadAddr", "b2regs9999");
	DeclareFieldLong("fBankWritAddr", "b2regs9999");
	DeclareFieldLong("fIPL", "b2regs9999");
	DeclareFieldOfSize("fdisp_table", "b2regs9999", 65536);
	WriteEndLocalData();

	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("dispatch table");
	WriteBlankLineToDestFile();
	if (cur_ide == gbk_ide_mpw) {
		++DestFileIndent;
		WriteDestFileLn("toc");
		WriteDestFileLn("tc\t.Dispatches[TC],.Dispatches[RW]");
		WriteDestFileLn("csect\t.Dispatches[RW], 3");
		--DestFileIndent;
	} else {
		if (cur_ide == gbk_ide_xcd) {
			WriteDestFileLn(".const");
		} else {
			WriteDestFileLn("\t.section\t.rodata");
		}
		WriteDestFileLn("\t.align 2");
		WriteALocalLabel("Dispatches");
	}
	DefineDispatchField("DoIKind_Tst");
	DefineDispatchField("DoIKind_Cmp");
	DefineDispatchField("DoIKind_CmpI");
	DefineDispatchField("DoIKind_CmpM");
	DefineDispatchField("DoIKind_Bcc");
	DefineDispatchField("DoIKind_Bra");
	DefineDispatchField("DoIKind_DBcc");
	DefineDispatchField("DoIKind_Swap");
	DefineDispatchField("DoIKind_MoveL");
	DefineDispatchField("DoIKind_MoveW");
	DefineDispatchField("DoIKind_MoveB");
	DefineDispatchField("DoIKind_MoveAL");
	DefineDispatchField("DoIKind_MoveAW");
	DefineDispatchField("DoIKind_MoveQ");
	DefineDispatchField("DoIKind_AddEaR");
	DefineDispatchField("DoIKind_AddQ");
	DefineDispatchField("DoIKind_AddI");
	DefineDispatchField("DoIKind_AddREa");
	DefineDispatchField("DoIKind_SubEaR");
	DefineDispatchField("DoIKind_SubQ");
	DefineDispatchField("DoIKind_SubI");
	DefineDispatchField("DoIKind_SubREa");
	DefineDispatchField("DoIKind_Lea");
	DefineDispatchField("DoIKind_PEA");
	DefineDispatchField("DoIKind_A");
	DefineDispatchField("DoIKind_Bsr");
	DefineDispatchField("DoIKind_Jsr");
	DefineDispatchField("DoIKind_LinkA6");
	DefineDispatchField("DoIKind_MOVEMRmML");
	DefineDispatchField("DoIKind_MOVEMApRL");
	DefineDispatchField("DoIKind_UnlkA6");
	DefineDispatchField("DoIKind_Rts");
	DefineDispatchField("DoIKind_Jmp");
	DefineDispatchField("DoIKind_Clr");
	DefineDispatchField("DoIKind_AddA");
	DefineDispatchField("DoIKind_AddQA");
	DefineDispatchField("DoIKind_SubA");
	DefineDispatchField("DoIKind_SubQA");
	DefineDispatchField("DoIKind_CmpA");
	DefineDispatchField("DoIKind_AddXd");
	DefineDispatchField("DoIKind_AddXm");
	DefineDispatchField("DoIKind_SubXd");
	DefineDispatchField("DoIKind_SubXm");
	DefineDispatchField("DoIKind_RolopNM");
	DefineDispatchField("DoIKind_RolopND");
	DefineDispatchField("DoIKind_RolopDD");
	DefineDispatchField("DoIKind_BitOpDD");
	DefineDispatchField("DoIKind_BitOpDM");
	DefineDispatchField("DoIKind_BitOpND");
	DefineDispatchField("DoIKind_BitOpNM");
	DefineDispatchField("DoIKind_AndI");
	DefineDispatchField("DoIKind_AndEaD");
	DefineDispatchField("DoIKind_AndDEa");
	DefineDispatchField("DoIKind_OrI");
	DefineDispatchField("DoIKind_OrDEa");
	DefineDispatchField("DoIKind_OrEaD");
	DefineDispatchField("DoIKind_Eor");
	DefineDispatchField("DoIKind_EorI");
	DefineDispatchField("DoIKind_Not");
	DefineDispatchField("DoIKind_Scc");
	DefineDispatchField("DoIKind_NegX");
	DefineDispatchField("DoIKind_Neg");
	DefineDispatchField("DoIKind_EXTW");
	DefineDispatchField("DoIKind_EXTL");
	DefineDispatchField("DoIKind_MulU");
	DefineDispatchField("DoIKind_MulS");
	DefineDispatchField("DoIKind_DivU");
	DefineDispatchField("DoIKind_DivS");
	DefineDispatchField("DoIKind_Exgdd");
	DefineDispatchField("DoIKind_Exgaa");
	DefineDispatchField("DoIKind_Exgda");
	DefineDispatchField("DoIKind_MoveCCREa");
	DefineDispatchField("DoIKind_MoveEaCCR");
	DefineDispatchField("DoIKind_MoveSREa");
	DefineDispatchField("DoIKind_MoveEaSR");
	DefineDispatchField("DoIKind_BinOpStatusCCR");
	DefineDispatchField("DoIKind_MOVEMApRW");
	DefineDispatchField("DoIKind_MOVEMRmMW");
	DefineDispatchField("DoIKind_MOVEMrm");
	DefineDispatchField("DoIKind_MOVEMmr");
	DefineDispatchField("DoIKind_Abcdr");
	DefineDispatchField("DoIKind_Abcdm");
	DefineDispatchField("DoIKind_Sbcdr");
	DefineDispatchField("DoIKind_Sbcdm");
	DefineDispatchField("DoIKind_Nbcd");
	DefineDispatchField("DoIKind_Rte");
	DefineDispatchField("DoIKind_Nop");
	DefineDispatchField("DoIKind_MoveP");
	DefineDispatchField("DoIKind_Illegal");
	DefineDispatchField("DoIKind_ChkW");
	DefineDispatchField("DoIKind_Trap");
	DefineDispatchField("DoIKind_TrapV");
	DefineDispatchField("DoIKind_Rtr");
	DefineDispatchField("DoIKind_Link");
	DefineDispatchField("DoIKind_Unlk");
	DefineDispatchField("DoIKind_MoveRUSP");
	DefineDispatchField("DoIKind_MoveUSPR");
	DefineDispatchField("DoIKind_Tas");
	DefineDispatchField("DoIKind_F");
	DefineDispatchField("DoIKind_CallMorRtm");
	DefineDispatchField("DoIKind_Stop");
	DefineDispatchField("DoIKind_Reset");

	DeclareFieldOffset("x_b2S9993", "Dispatches");
	DefineDispatchField("L49");
	DefineDispatchField("L36");
	DefineDispatchField("L8");
	DefineDispatchField("L10");
	DefineDispatchField("L12");
	DefineDispatchField("L14");
	DefineDispatchField("L16");
	DefineDispatchField("L18");
	DefineDispatchField("L20");
	DefineDispatchField("L22");
	DefineDispatchField("L24");
	DefineDispatchField("L26");
	DefineDispatchField("L28");
	DefineDispatchField("L30");
	DefineDispatchField("L32");
	DefineDispatchField("L34");

	DeclareFieldOffset("x_b2S9987", "Dispatches");
	DefineDispatchField("SetArgKindDReg");
	DefineDispatchField("SetArgKindAReg");
	DefineDispatchField("L143");
	DefineDispatchField("L145");
	DefineDispatchField("L154");
	DefineDispatchField("L163");
	DefineDispatchField("L165");
	DefineDispatchField("L167");
	DefineDispatchField("L193");
	DefineDispatchField("B2end9957");

	DeclareFieldOffset("x_b2S9986", "Dispatches");
	DefineDispatchField("L170");
	DefineDispatchField("L172");
	DefineDispatchField("L174");
	DefineDispatchField("L176");
	DefineDispatchField("SetArgKindImmediate");
	DefineDispatchField("B2end9957");
	DefineDispatchField("B2end9957");
	DefineDispatchField("B2end9957");

	DeclareFieldOffset("x_b2S9983", "Dispatches");
	DefineDispatchField("L380");
	DefineDispatchField("L423");
	DefineDispatchField("L458");
	DefineDispatchField("L494");
	DefineDispatchField("L552");
	DefineDispatchField("L623");
	DefineDispatchField("L521");
	DefineDispatchField("L583");
}

#pragma segment ASMgen1

LOCALPROC WritePPCasmMINEM68K1(void)
{
	WriteBeginAsmCode();
	WriteBlankLineToDestFile();
	if (cur_ide == gbk_ide_mpw) {
		WriteDestFileLn("\tcsect .BeginLocalCode[PR], 5");
	} else {
		WriteDestFileLn("\t.align 5");
	}
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_CmpM");
	WriteNormInstr("bl", ".DecodesAA_xxxxdddxssxxxrrr");
	WriteNormInstr("b", ".DoCompare");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_CmpI");
	WriteNormInstr("bl", ".DecodeI_xxxxxxxxssmmmrrr");
	WriteNormInstr("b", ".DoCompare");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Cmp");
	WriteNormInstr("bl", ".DecodeEaD_xxxxdddxssmmmrrr");
	WriteALocalLabel("DoCompare");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("bl", ".ShiftBinArgs");
	WriteALocalLabel("DoCompare_r30r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("subfco", "r3, r30, r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("mfxer", "r6");
	WriteNormInstr("rlwinm", "rFlag_c, r6, 3, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_v, r6, 2, 31, 31");
	WriteNormInstr("xori", "rFlag_c, rFlag_c, 1");
	WriteALocalLabel("SetNZandNext");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteAsmInstrComment("b\t.m68k_NextInstruction");
	WriteALocalLabel("DoIKind_Nop");
	WriteALocalLabel("m68k_NextInstruction");
	WriteNormInstr("lhzu", "rOpCode, 2(rPC_p)");
	WriteNormInstr("addi", "rMaxInstrsToGo, rMaxInstrsToGo, -1");
	WriteNormInstr("cmpi", "cr0, rMaxInstrsToGo, 0");
	WriteNormInstr("beq", "cr0,.after_m68k_go_MaxInstructions");
	WriteBlankLineToDestFile();
	WriteNormInstr("addi", "r12, rOpCode, fdisp_table");
	WriteNormInstr("lbzx", "r12, rRegs, r12");
	WriteNormInstr("rlwinm", "r12, r12, 2, 0, 29");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwzx", "r12, rDispatches, r12");
	WriteNormInstr("mtctr", "r12");
	WriteDestFileLn("\tbctr");
		WriteAsmIndentComment("switch branch");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodeNormModeRegister");
	WriteNormInstr("rlwinm", "r3, rOpCode, 29, 29, 31");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteALocalLabel("DecodeModeRegister");
	WriteNormInstr("addi", "r12, rDispatches, x_b2S9987");
	WriteNormInstr("rlwinm", "r5, r3, 2, 0, 29");
	WriteNormInstr("lwzx", "r5, r12, r5");
	WriteNormInstr("mtctr", "r5");
	WriteDestFileLn("\tbctr");
	WriteBlankLineToDestFile();
	WriteALocalLabel("SetArgKindDReg");
	WriteNormInstr("addi", "rArgKind, 0, 2");
	WriteNormInstr("rlwinm", "rArgAddr, r4, 2, 0, 29");
	WriteNormInstr("add", "rArgAddr, rArgAddr, rRegs");
	WrOpPPC_blr();
	WriteALocalLabel("SetArgKindAReg");
	WriteNormInstr("addi", "rArgKind, 0, 2");
	WriteNormInstr("rlwinm", "rArgAddr, r4, 2, 0, 29");
	WriteNormInstr("add", "rArgAddr, rArgAddr, rRegs");
	WriteNormInstr("addi", "rArgAddr, rArgAddr, 32");
	WrOpPPC_blr();
	WriteALocalLabel("L143");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("rlwinm", "r3, r4, 2, 0, 29");
	WriteNormInstr("add", "r6, r3, rRegs");
	WriteNormInstr("lwz", "rArgAddr, 32(r6)");
	WrOpPPC_blr();
	WriteALocalLabel("L145");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("rlwinm", "r3, r4, 2, 0, 29");
	WriteNormInstr("addi", "r5, r4, 1");
	WriteNormInstr("add", "r7, r3, rRegs");
	WriteNormInstr("rlwinm", "r5, r5, 29, 31, 31");
	WriteNormInstr("lwz", "rArgAddr, 32(r7)");
	WriteNormInstr("and", "r5, r5, rOpSize");
	WriteNormInstr("add", "r3, rArgAddr, rOpSize");
	WriteNormInstr("add", "r3, r3, r5");
	WriteNormInstr("stw", "r3, 32(r7)");
	WrOpPPC_blr();
	WriteALocalLabel("L154");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("rlwinm", "r3, r4, 2, 0, 29");
	WriteNormInstr("addi", "r5, r4, 1");
	WriteNormInstr("add", "r7, r3, rRegs");
	WriteNormInstr("rlwinm", "r5, r5, 29, 31, 31");
	WriteNormInstr("lwz", "rArgAddr, 32(r7)");
	WriteNormInstr("and", "r5, r5, rOpSize");
	WriteNormInstr("subf", "r3, rOpSize, rArgAddr");
	WriteNormInstr("subf", "rArgAddr, r5, r3");
	WriteNormInstr("stw", "rArgAddr, 32(r7)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteALocalLabel("L163");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("rlwinm", "r5, r4, 2, 0, 29");
	WriteNormInstr("add", "r6, r5, rRegs");
	WriteNormInstr("lwz", "r12, 32(r6)");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("extsh", "r3, r3");
	WriteNormInstr("add", "rArgAddr, r12, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L165");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("rlwinm", "r5, r4, 2, 0, 29");
	WriteNormInstr("add", "r6, r5, rRegs");
	WriteNormInstr("lwz", "r3, 32(r6)");
	WriteNormInstr("b", ".get_disp_ea");
	WriteALocalLabel("L167");
	WriteNormInstr("addi", "r12, rDispatches, x_b2S9986");
	WriteNormInstr("rlwinm", "r3, r4, 2, 0, 29");
	WriteNormInstr("lwzx", "r3, r12, r3");
	WriteNormInstr("mtctr", "r3");
	WriteDestFileLn("\tbctr");
	WriteALocalLabel("L170");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("extsh", "rArgAddr, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L172");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("lwz", "r3, 2(rPC_p)");
	WriteNormInstr("addi", "rPC_p, rPC_p, 4");
	WriteNormInstr("mr", "rArgAddr, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L174");
	WriteNormInstr("mflr", "r9");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("bl", ".m68k_getpc");
	WriteNormInstr("lhzu", "r8, 2(rPC_p)");
	WriteNormInstr("mtlr", "r9");
	WriteNormInstr("extsh", "r8, r8");
	WriteNormInstr("add", "rArgAddr, r8, r3");
	WriteALocalLabel("B2end9957");
	WrOpPPC_blr();
	WriteALocalLabel("L176");
	WriteNormInstr("mflr", "r9");
	WriteNormInstr("addi", "rArgKind, 0, 0");
	WriteNormInstr("bl", ".m68k_getpc");
	WriteNormInstr("mtlr", "r9");
	WriteNormInstr("b", ".get_disp_ea");
	WriteALocalLabel("SetArgKindImmediate");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("addi", "rArgKind, 0, 3");
	WriteNormInstr("blt", "cr0,.L181");
	WriteNormInstr("bgt", "cr0,.L185");
	WriteALocalLabel("L183");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("extsh", "rArgAddr, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L181");
	WriteNormInstr("lbz", "r3, 3(rPC_p)");
	WriteNormInstr("addi", "rPC_p, rPC_p, 2");
	WriteNormInstr("extsb", "rArgAddr, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L185");
	WriteNormInstr("lwz", "r3, 2(rPC_p)");
	WriteNormInstr("addi", "rPC_p, rPC_p, 4");
	WriteNormInstr("mr", "rArgAddr, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L193");
	WriteNormInstr("addi", "rArgKind, 0, 3");
	WriteNormInstr("mr", "rArgAddr, r4");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_disp_ea");
	WriteNormInstr("mr", "r8, r3");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("rlwinm", "r6, r3, 0, 16, 31");
	WriteNormInstr("rlwinm", "r4, r3, 22, 26, 29");
	WriteNormInstr("lwzx", "r9, r4, rRegs");
	WriteNormInstr("rlwinm.", "r6, r6, 0, 20, 20");
	WriteNormInstr("bne", "cr0,.L133");
	WriteNormInstr("extsh", "r9, r9");
	WriteALocalLabel("L133");
	WriteNormInstr("extsb", "r7, r3");
	WriteNormInstr("add", "r4, r8, r7");
	WriteNormInstr("add", "rArgAddr, r4, r9");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_byte");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r9, r12, rBankReadAddr");
	WriteNormInstr("rlwinm", "r5, r3, 0, 15, 31");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("beq", "cr0,.get_byte_ext");
	WriteNormInstr("lbzx", "r3, r5, r9");
	WriteNormInstr("extsb", "r3, r3");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_word");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r9, r12, rBankReadAddr");
	WriteNormInstr("rlwinm", "r5, r3, 0, 15, 31");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("beq", "cr0,.get_word_ext");
	WriteNormInstr("lhzx", "r3, r5, r9");
	WriteNormInstr("extsh", "r3, r3");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_long");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r9, r12, rBankReadAddr");
	WriteNormInstr("rlwinm", "r5, r3, 0, 15, 31");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("beq", "cr0,.get_long_ext");
	WriteNormInstr("lwzx", "r3, r5, r9");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("GetArgValue");
	WriteNormInstr("cmpi", "cr1, rArgKind, 2");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("beq", "cr1, .L220");
	WriteNormInstr("bgt", "cr1, .L232");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r3, rArgAddr");
	WriteNormInstr("blt", "cr0,.get_byte");
	WriteNormInstr("bgt", "cr0,.get_long");
	WriteNormInstr("b", ".get_word");
	WriteBlankLineToDestFile();
	WriteALocalLabel("L220");
	WriteNormInstr("blt", "cr0,.L223");
	WriteNormInstr("bgt", "cr0,.L224");
	WriteBlankLineToDestFile();
	WriteNormInstr("lha", "r3, 2(rArgAddr)");
	WriteAsmInstrComment("extsh\tr3, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L223");
	WriteNormInstr("lbz", "r3, 3(rArgAddr)");
	WriteNormInstr("extsb", "r3, r3");
	WrOpPPC_blr();
	WriteALocalLabel("L224");
	WriteNormInstr("lwz", "r3, 0(rArgAddr)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteALocalLabel("L232");
	WriteNormInstr("mr", "r3, rArgAddr");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveB");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("b", ".DoMove");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveL");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteNormInstr("b", ".DoMove");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveW");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteAsmInstrComment("fall through");
	WriteALocalLabel("DoMove");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r28, r3");
	WriteNormInstr("rlwinm", "r3, rOpCode, 26, 29, 31");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("mr", "r3, r28");
	WriteALocalLabel("SetCCRandArgValue");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteAsmInstrComment("b\t.SetArgValue");
	WriteALocalLabel("SetArgValue");
	WriteNormInstr("cmpi", "cr1, rArgKind, 2");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("beq", "cr1, .L262");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r4, r3");
	WriteNormInstr("mr", "r3, rArgAddr");
	WriteNormInstr("blt", "cr0,.L253");
	WriteNormInstr("bgt", "cr0,.L257");
	WriteBlankLineToDestFile();
	WriteALocalLabel("L252");
	WriteNormInstr("bl", ".put_word");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("put_word");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r9, r12, rBankWritAddr");
	WriteNormInstr("rlwinm", "r6, r3, 0, 15, 31");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("beq", "cr0,.put_word_ext");
	WriteNormInstr("sthx", "r4, r6, r9");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("L253");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("put_byte");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r9, r12, rBankWritAddr");
	WriteNormInstr("rlwinm", "r6, r3, 0, 15, 31");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("beq", "cr0,.put_byte_ext");
	WriteNormInstr("stbx", "r4, r6, r9");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("L257");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("put_long");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r9, r12, rBankWritAddr");
	WriteNormInstr("rlwinm", "r6, r3, 0, 15, 31");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("beq", "cr0,.put_long_ext");
	WriteNormInstr("stwx", "r4, r6, r9");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("L262");
	WriteNormInstr("blt", "cr0,.L265");
	WriteNormInstr("bgt", "cr0,.L269");
	WriteBlankLineToDestFile();
	WriteNormInstr("sth", "r3, 2(rArgAddr)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L265");
	WriteNormInstr("stb", "r3, 3(rArgAddr)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L269");
	WriteNormInstr("stw", "r3, 0(rArgAddr)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("octdat");
	WriteAsmInstrComment("result in r30, preserve r5-r7");
	WriteNormInstr("rlwinm", "r30, rOpCode, 23, 29, 31");
	WriteNormInstr("addi", "r3, r30, -1");
	WriteNormInstr("rlwimi", "r30, r3, 0, 28, 28");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("FindOpSizeFromb76");
	WriteNormalAsmComment("must preserve cr1");
	WriteNormInstr("rlwinm", "r12, rOpCode, 26, 30, 31");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("slw", "rOpSize, rOpSize, r12");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodeDEa_xxxxdddxssmmmrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".SetArgKindDReg");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".DecodeNormModeRegister");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodeEaD_xxxxdddxssmmmrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".SetArgKindDReg");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodeI_xxxxxxxxssmmmrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".SetArgKindImmediate");
	WriteNormInstr("mr", "r30, rArgAddr");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".DecodeNormModeRegister");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodeDD_xxxxdddxssxxxrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("bl", ".SetArgKindDReg");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".SetArgKindDReg");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodeAAs_xxxxdddxssxxxrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".DecodeModeRegister");
	WriteBlankLineToDestFile();
	WriteALocalLabel("Decode_xxxxnnnxssmmmrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".octdat");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".DecodeNormModeRegister");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DecodesAA_xxxxdddxssxxxrrr");
	WriteNormInstr("mflr", "r31");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("addi", "r3, 0, 3");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("addi", "r3, 0, 3");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("mtlr", "r31");
		WriteAsmIndentComment("following call returns to address in r31");
	WriteNormInstr("b", ".DecodeModeRegister");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Tst");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteALocalLabel("SetCCRandNext");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("b", ".SetNZandNext");
	WriteBlankLineToDestFile();
	WriteALocalLabel("ShiftBinArgs");
	WriteNormInstr("cmpi", "cr1, rOpSize, 2");
	WriteNormInstr("bgtlr", "cr1");
	WriteALocalLabel("ShiftBinArgsNonL");
	WriteNormInstr("blt", "cr1,.L01_ShiftBinArgs");
	WriteNormInstr("rlwinm", "r3, r3, 16, 0, 15");
	WriteNormInstr("rlwinm", "r30, r30, 16, 0, 15");
	WrOpPPC_blr();
	WriteALocalLabel("L01_ShiftBinArgs");
	WriteNormInstr("rlwinm", "r3, r3, 24, 0, 7");
	WriteNormInstr("rlwinm", "r30, r30, 24, 0, 7");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteALocalLabel("cctrue");
	WriteNormInstr("addi", "r12, rDispatches, x_b2S9993");
	WriteNormInstr("rlwinm", "r4, rOpCode, 26, 26, 29");
	WriteNormInstr("lwzx", "r4, r12, r4");
	WriteNormInstr("mtctr", "r4");
	WriteDestFileLn("\tbctr");
	WriteBlankLineToDestFile();
	WriteALocalLabel("L8");
	WriteNormInstr("or", "r3, rFlag_c, rFlag_z");
	WriteNormInstr("xori", "r3, r3, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L10");
	WriteNormInstr("or", "r3, rFlag_c, rFlag_z");
	WrOpPPC_blr();
	WriteALocalLabel("L12");
	WriteNormInstr("xori", "r3, rFlag_c, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L14");
	WriteNormInstr("mr", "r3, rFlag_c");
	WrOpPPC_blr();
	WriteALocalLabel("L16");
	WriteNormInstr("xori", "r3, rFlag_z, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L18");
	WriteNormInstr("mr", "r3, rFlag_z");
	WrOpPPC_blr();
	WriteALocalLabel("L20");
	WriteNormInstr("xori", "r3, rFlag_v, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L22");
	WriteNormInstr("mr", "r3, rFlag_v");
	WrOpPPC_blr();
	WriteALocalLabel("L24");
	WriteNormInstr("xori", "r3, rFlag_n, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L26");
	WriteNormInstr("mr", "r3, rFlag_n");
	WrOpPPC_blr();
	WriteALocalLabel("L28");
	WriteNormInstr("xor", "r3, rFlag_n, rFlag_v");
	WriteNormInstr("xori", "r3, r3, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L30");
	WriteNormInstr("xor", "r3, rFlag_n, rFlag_v");
	WrOpPPC_blr();
	WriteALocalLabel("L32");
	WriteNormInstr("xor", "r3, rFlag_n, rFlag_v");
	WriteNormInstr("or", "r3, r3, rFlag_z");
	WriteNormInstr("xori", "r3, r3, 1");
	WrOpPPC_blr();
	WriteALocalLabel("L34");
	WriteNormInstr("xor", "r3, rFlag_n, rFlag_v");
	WriteNormInstr("or", "r3, r3, rFlag_z");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteALocalLabel("L36");
	WriteNormInstr("addi", "r3, 0, 0");
	WrOpPPC_blr();
	WriteALocalLabel("L49");
	WriteNormInstr("addi", "r3, 0, 1");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Bcc");
	WriteNormInstr("bl", ".cctrue");
	WriteNormInstr("cmpi", "cr1, r3, 0");
	WriteNormInstr("beq", "cr1, .DoIKind_BraSkip");
	WriteALocalLabel("DoIKind_Bra");
	WriteNormInstr("rlwinm.", "r9, rOpCode, 0, 24, 31");
	WriteAsmInstrComment("bl\t.m68k_getpc");
	WriteAsmInstrComment("mr\tr8, r3");
	WriteNormInstr("beq-", "cr0, .DoIKind_BraW");
	WriteNormInstr("extsb", "r3, r9");
	WriteNormInstr("add", "rPC_p, rPC_p, r3");
	WriteAsmInstrComment("bl\t.m68k_setpc");
	WriteAsmInstrComment("mr\trPC_p, r31");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("DoIKind_BraW");
	WriteNormalAsmComment("not on 68000");
	WriteAsmInstrComment("cmpi\tcr0, r9, 255");
	WriteAsmInstrComment("bne\tcr0, .L1626");
	WriteAsmInstrComment("bl\t.nextilong");
	WriteAsmInstrComment("b\t.L1630");
	WriteNormalAsmComment(".L1626:");
	WriteNormInstr("mr", "r8, rPC_p");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("extsh", "r3, r3");
	WriteNormInstr("add", "rPC_p, r8, r3");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_BraSkip");
	WriteNormInstr("rlwinm.", "r9, rOpCode, 0, 24, 31");
	WriteNormInstr("bne+", "cr0, .m68k_NextInstruction");
	WriteNormInstr("addi", "rPC_p, rPC_p, 2");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteNormalAsmComment("not on 68000");
	WriteAsmInstrComment("cmpi\tcr0, r9, 255");
	WriteAsmInstrComment("bne\tcr0, .L1626");
	WriteAsmInstrComment("bl\t.nextilong");
	WriteAsmInstrComment("b\t.L1630");
	WriteNormalAsmComment(".L1626:");
	WriteAsmInstrComment("b\t.m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_DBcc");
	WriteAsmInstrComment("bl\t.m68k_getpc");
	WriteNormInstr("mr", "r3, rPC_p");
	WriteNormInstr("lhzu", "r8, 2(rPC_p)");
	WriteNormInstr("extsh", "r8, r8");
	WriteNormInstr("add", "r29, r8, r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".cctrue");
	WriteNormInstr("cmpi", "cr1, r3, 0");
	WriteNormInstr("bne", "cr1, .m68k_NextInstruction");
	WriteNormInstr("rlwinm", "r5, rOpCode, 2, 27, 29");
	WriteNormInstr("lwzx", "r3, r5, rRegs");
	WriteNormInstr("extsh", "r31, r3");
	WriteNormInstr("addi", "r5, r5, 2");
	WriteNormInstr("cmpi", "cr0, r31, 0");
	WriteNormInstr("addi", "r3, r31, -1");
	WriteNormInstr("sthx", "r3, r5, rRegs");
	WriteNormInstr("beq", "cr0, .m68k_NextInstruction");
	WriteAsmInstrComment("mr\tr3, r29");
	WriteAsmInstrComment("bl\t.m68k_setpc");
	WriteNormInstr("mr", "rPC_p, r29");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Swap");
	WriteNormInstr("rlwinm", "r5, rOpCode, 2, 27, 29");
	WriteNormInstr("lwzx", "r6, r5, rRegs");
	WriteNormInstr("rlwinm", "r3, r6, 16, 0, 31");
	WriteNormInstr("stwx", "r3, r5, rRegs");
	WriteNormInstr("b", ".SetCCRandNext");
}

#pragma segment ASMgen2

LOCALPROC WritePPCasmMINEM68K2(void)
{
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveAL");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteNormInstr("b", ".DoMoveA");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveAW");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteAsmInstrComment("fall through");
	WriteALocalLabel("DoMoveA");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("rlwinm", "rArgAddr, rOpCode, 25, 27, 29");
	WriteNormInstr("addi", "rArgAddr, rArgAddr, 32");
	WriteNormInstr("stwx", "r3, rArgAddr, rRegs");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveQ");
	WriteNormInstr("rlwinm", "r3, rOpCode, 0, 24, 31");
	WriteNormInstr("rlwinm", "r11, rOpCode, 25, 27, 29");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("stwx", "r3, r11, rRegs");
	WriteNormInstr("b", ".SetCCRandNext");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddREa");
	WriteNormInstr("bl", ".DecodeDEa_xxxxdddxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpAdd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddI");
	WriteNormInstr("bl", ".DecodeI_xxxxxxxxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpAdd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddQ");
	WriteNormInstr("bl", ".Decode_xxxxnnnxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpAdd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddEaR");
	WriteNormInstr("bl", ".DecodeEaD_xxxxdddxssmmmrrr");
	WriteAsmInstrComment("b\t.DoBinOpAdd");
	WriteALocalLabel("DoBinOpAdd");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("bl", ".ShiftBinArgs");
	WriteNormalAsmComment("BinOpAdd");
	WriteBlankLineToDestFile();
	WriteNormInstr("addco", "r3, r3, r30");
	WriteNormInstr("mfxer", "r6");
	WriteNormInstr("cntlzw", "r5, r3");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_c, r6, 3, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_v, r6, 2, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_z, r5, 27, 5, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("b", ".SetArgUnshiftValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubREa");
	WriteNormInstr("bl", ".DecodeDEa_xxxxdddxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpSub");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubI");
	WriteNormInstr("bl", ".DecodeI_xxxxxxxxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpSub");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubEaR");
	WriteNormInstr("bl", ".DecodeEaD_xxxxdddxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpSub");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubQ");
	WriteNormInstr("bl", ".Decode_xxxxnnnxssmmmrrr");
	WriteAsmInstrComment("b\t.DoBinOpSub");
	WriteALocalLabel("DoBinOpSub");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("bl", ".ShiftBinArgs");
	WriteBlankLineToDestFile();
	WriteNormInstr("subfco", "r3, r30, r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("mfxer", "r6");
	WriteNormInstr("cntlzw", "r5, r3");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_c, r6, 3, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_v, r6, 2, 31, 31");
	WriteNormInstr("xori", "rFlag_c, rFlag_c, 1");
	WriteNormInstr("rlwinm", "rFlag_z, r5, 27, 5, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteALocalLabel("SetArgUnshiftValue");
	WriteNormInstr("bgt", "cr1,.SetArgValue");
	WriteNormInstr("blt", "cr1,.L04_BinOpSub");
	WriteNormInstr("rlwinm", "r3, r3, 16, 16, 31");
	WriteNormInstr("b", ".SetArgValue");
	WriteALocalLabel("L04_BinOpSub");
	WriteNormInstr("rlwinm", "r3, r3, 8, 24, 31");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Lea");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("rlwinm", "r28, rOpCode, 25, 27, 29");
	WriteNormInstr("add", "r28, r28, rRegs");
	WriteNormInstr("stw", "rArgAddr, 32(r28)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_PEA");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r4, rArgAddr");
	WriteNormInstr("addi", "r3, r3, -4");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment(".nextibyte:");
	WriteAsmInstrComment("lbz\tr3, 3(rPC_p)");
	WriteAsmInstrComment("addi\trPC_p, rPC_p, 2");
	WriteAsmInstrComment("blr");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment(".nextiword:");
	WriteAsmInstrComment("lhzu\tr3, 2(rPC_p)");
	WriteAsmInstrComment("blr");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment(".nextilong:");
	WriteAsmInstrComment("lwz\tr3, 2(rPC_p)");
	WriteAsmInstrComment("addi\trPC_p, rPC_p, 4");
	WriteAsmInstrComment("blr");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteNormalAsmComment(".BackupPC:");
	WriteAsmInstrComment("addi\trPC_p, rPC_p, -2");
	WriteAsmInstrComment("blr");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("m68k_getpc");
	WriteAsmInstrComment("must preserve r9");
	WriteNormInstr("lwz", "r5, fReg_pc_oldp(rRegs)");
	WriteNormInstr("lwz", "r7, fReg_pc(rRegs)");
	WriteNormInstr("subf", "r3, r5, rPC_p");
	WriteNormInstr("add", "r3, r7, r3");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("m68k_setpc");
	WriteNormInstr("stw", "r3, fReg_pc(rRegs)");
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("get_pc_real_address:");
	WriteNormInstr("rlwinm", "r12, r3, 17, 23, 29");
	WriteNormInstr("lwzx", "r12, r12, rBankReadAddr");
	WriteNormInstr("cmpi", "cr0, r12, 0");
	WriteNormInstr("beq", "cr0,.get_pc_real_address_ext");
	WriteNormInstr("rlwinm", "r4, r3, 0, 15, 31");
	WriteNormInstr("add", "rPC_p, r4, r12");
	WriteALocalLabel("end_get_pc_real_address");
	WriteBlankLineToDestFile();
	WriteNormInstr("addi", "rPC_p, rPC_p, -2");
	WriteNormInstr("stw", "rPC_p, fReg_pc_oldp(rRegs)");
	WriteBlankLineToDestFile();
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("m68k_getSR");
	WriteNormInstr("mr", "r3, rFlag_c");
	WriteNormInstr("lbz", "r6, fReg_t1(rRegs)");
	WriteNormInstr("lbz", "r0, fReg_s(rRegs)");
	WriteNormInstr("lwz", "r5, fReg_intmask(rRegs)");
	WriteAsmInstrComment("lbz\tr4, fReg_m(rRegs)");
	WriteNormInstr("rlwimi", "r3, rFlag_x, 4, 27, 27");
	WriteNormInstr("rlwimi", "r3, rFlag_n, 3, 28, 28");
	WriteNormInstr("rlwimi", "r3, rFlag_z, 2, 29, 29");
	WriteNormInstr("rlwimi", "r3, rFlag_v, 1, 30, 30");
	WriteNormInstr("rlwimi", "r3, r6, 15, 16, 16");
	WriteNormInstr("rlwimi", "r3, r0, 13, 18, 18");
	WriteNormInstr("rlwimi", "r3, r5, 8, 21, 23");
	WriteAsmInstrComment("rlwimi\tr3, r4, 12, 19, 19");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("ExceptionTo");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "r28, -16(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -80(sp)");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteNormInstr("bl", ".m68k_getSR");
	WriteNormInstr("lbz", "r0, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r0, 0");
	WriteNormInstr("lwz", "r9, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r28, r3");
	WriteNormInstr("bne", "cr0,.L100");
	WriteNormInstr("stw", "r9, fReg_usp(rRegs)");
	WriteNormInstr("addi", "r3, 0, 1");
	WriteNormInstr("lwz", "r9, fReg_isp(rRegs)");
	WriteNormInstr("stb", "r3, fReg_s(rRegs)");
	WriteALocalLabel("L100");
	WriteNormInstr("addi", "r8, r9, -4");
	WriteNormInstr("stw", "r8, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".m68k_getpc");
	WriteNormInstr("mr", "r4, r3");
	WriteNormInstr("mr", "r3, r8");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r4, r28");
	WriteNormInstr("addi", "r3, r3, -2");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".put_word");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteAsmInstrComment("stb\tr30, fReg_m(rRegs)");
	WriteNormInstr("stb", "r30, fReg_t1(rRegs)");
	WriteNormInstr("stb", "r30, fReg_TracePend(rRegs)");
	WriteNormInstr("lwz", "r0, 88(sp)");
	WriteNormInstr("addi", "sp, sp, 80");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "r28, -16(sp)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("Exception");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("rlwinm", "r3, r3, 2, 0, 29");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("bl", ".ExceptionTo");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_A");
	WriteNormInstr("addi", "r3, 0, 10");
	WriteALocalLabel("BackupExceptionAndNext");
	WriteNormInstr("addi", "rPC_p, rPC_p, -2");
	WriteAsmInstrComment("b\t.ExceptionAndNext");
	WriteALocalLabel("ExceptionAndNext");
	WriteNormInstr("rlwinm", "r3, r3, 2, 0, 29");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("bl", ".ExceptionTo");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Bsr");
	WriteNormInstr("rlwinm.", "r9, rOpCode, 0, 24, 31");
	WriteAsmInstrComment("bl\t.m68k_getpc");
	WriteAsmInstrComment("mr\tr8, r3");
	WriteNormInstr("mr", "r8, rPC_p");
	WriteNormInstr("bne+", "cr0, .L1622");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("extsh", "r3, r3");
	WriteNormInstr("b", ".L1630");
	WriteALocalLabel("L1622");
	WriteNormalAsmComment("not on 68000");
	WriteAsmInstrComment("cmpi\tcr0, r9, 255");
	WriteAsmInstrComment("bne\tcr0, .L1626");
	WriteAsmInstrComment("bl\t.nextilong");
	WriteAsmInstrComment("b\t.L1630");
	WriteNormalAsmComment(".L1626:");
	WriteNormInstr("extsb", "r3, r9");
	WriteALocalLabel("L1630");
	WriteNormInstr("add", "r31, r8, r3");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("addi", "r8, r3, -4");
	WriteNormInstr("stw", "r8, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".m68k_getpc");
	WriteNormInstr("mr", "r4, r3");
	WriteNormInstr("mr", "r3, r8");
	WriteNormInstr("bl", ".put_long");
	WriteAsmInstrComment("mr\tr3, r31");
	WriteAsmInstrComment("bl\t.m68k_setpc");
	WriteNormInstr("mr", "rPC_p, r31");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Jsr");
	WriteNormInstr("addi", "rOpSize, 0, 0");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("addi", "r30, r3, -4");
	WriteNormInstr("stw", "r30, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".m68k_getpc");
	WriteNormInstr("mr", "r4, r3");
	WriteNormInstr("mr", "r3, r30");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("mr", "r3, rArgAddr");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_LinkA6");
	WriteALocalLabel("DoIKind_Link");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("rlwinm", "r0, rOpCode, 2, 27, 29");
	WriteNormInstr("addi", "r3, r3, -4");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteNormInstr("add", "r30, r0, rRegs");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("lwz", "r4, 32(r30)");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("stw", "r29, 32(r30)");
	WriteNormInstr("lwz", "r30, fReg_A7(rRegs)");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("extsh", "r3, r3");
	WriteNormInstr("add", "r0, r30, r3");
	WriteNormInstr("stw", "r0, fReg_A7(rRegs)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_UnlkA6");
	WriteALocalLabel("DoIKind_Unlk");
	WriteNormInstr("rlwinm", "r0, rOpCode, 0, 29, 31");
	WriteNormInstr("cmpi", "cr0, r0, 7");
	WriteNormInstr("beq", "cr0, .L1483");
	WriteNormInstr("rlwinm", "r4, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r30, r4, rRegs");
	WriteNormInstr("lwz", "r3, 32(r30)");
	WriteNormInstr("addi", "r29, r3, 4");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("stw", "r3, 32(r30)");
	WriteNormInstr("stw", "r29, fReg_A7(rRegs)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1483");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("addi", "r3, r3, 4");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Rts");
	WriteNormInstr("lwz", "r4, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r3, r4");
	WriteNormInstr("addi", "r4, r4, 4");
	WriteNormInstr("stw", "r4, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Jmp");
	WriteNormInstr("addi", "rOpSize, 0, 0");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("mr", "r3, rArgAddr");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Clr");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("addi", "rFlag_n, 0, 0");
	WriteNormInstr("addi", "rFlag_z, 0, 1");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddA");
	WriteNormInstr("rlwinm", "r3, rOpCode, 25, 30, 30");
	WriteNormInstr("addi", "rOpSize, r3, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("rlwinm", "r0, rOpCode, 25, 27, 29");
	WriteNormInstr("add", "r4, r0, rRegs");
	WriteNormInstr("lwz", "r5, 32(r4)");
	WriteBlankLineToDestFile();
	WriteNormInstr("add", "r5, r3, r5");
	WriteNormInstr("stw", "r5, 32(r4)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddQA");
	WriteNormInstr("rlwinm", "r5, rOpCode, 0, 29, 31");
	WriteNormInstr("rlwinm", "r6, r5, 2, 0, 29");
	WriteNormInstr("add", "r6, r6, rRegs");
	WriteNormInstr("lwz", "r7, 32(r6)");
	WriteNormInstr("bl", ".octdat");
	WriteNormInstr("add", "r7, r30, r7");
	WriteNormInstr("stw", "r7, 32(r6)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubA");
	WriteNormInstr("rlwinm", "rOpSize, rOpCode, 25, 30, 30");
	WriteNormInstr("addi", "rOpSize, rOpSize, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("rlwinm", "r0, rOpCode, 25, 27, 29");
	WriteNormInstr("add", "r4, r0, rRegs");
	WriteNormInstr("lwz", "r5, 32(r4)");
	WriteBlankLineToDestFile();
	WriteNormInstr("subf", "r5, r3, r5");
	WriteNormInstr("stw", "r5, 32(r4)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubQA");
	WriteNormInstr("rlwinm", "r5, rOpCode, 0, 29, 31");
	WriteNormInstr("rlwinm", "r6, r5, 2, 0, 29");
	WriteNormInstr("add", "r6, r6, rRegs");
	WriteNormInstr("lwz", "r7, 32(r6)");
	WriteNormInstr("bl", ".octdat");
	WriteNormInstr("subf", "r7, r30, r7");
	WriteNormInstr("stw", "r7, 32(r6)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_CmpA");
	WriteNormInstr("rlwinm", "rOpSize, rOpCode, 25, 30, 30");
	WriteNormInstr("addi", "rOpSize, rOpSize, 2");
	WriteNormalAsmComment("DoCompareA (m2 in r29)");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("rlwinm", "r3, rOpCode, 25, 27, 29");
	WriteNormInstr("add", "r3, r3, rRegs");
	WriteNormInstr("lwz", "r3, 32(r3)");
	WriteNormInstr("b", ".DoCompare_r30r3");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddXm");
	WriteNormInstr("bl", ".DecodeAAs_xxxxdddxssxxxrrr");
	WriteNormInstr("b", ".DoBinOpAddX");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AddXd");
	WriteNormInstr("bl", ".DecodeDD_xxxxdddxssxxxrrr");
	WriteAsmInstrComment("b\t.DoBinOpAddX");
	WriteALocalLabel("DoBinOpAddX");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("cmpi", "cr1, rOpSize, 2");
	WriteNormInstr("bgt", "cr1, .L00_DoBinOpAddX");
	WriteNormInstr("addi", "r3, r3, 1");
	WriteNormInstr("bl", ".ShiftBinArgsNonL");
	WriteNormInstr("addi", "r3, r3, -1");
	WriteALocalLabel("L00_DoBinOpAddX");
	WriteBlankLineToDestFile();
	WriteNormInstr("addic", "r5, rFlag_x, -1");
		WriteAsmIndentComment("load carry flag");
	WriteNormInstr("addeo", "r3, r3, r30");
	WriteBlankLineToDestFile();
	WriteNormInstr("mfxer", "r6");
	WriteNormInstr("rlwinm", "rFlag_c, r6, 3, 31, 31");
	WriteBlankLineToDestFile();
	WriteALocalLabel("L01_DoBinOpAddX");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_v, r6, 2, 31, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteBlankLineToDestFile();
	WriteNormInstr("bgt", "cr1,.L03_DoBinOpAddX");
	WriteNormInstr("blt", "cr1,.L04_DoBinOpAddX");
	WriteNormInstr("rlwinm", "r3, r3, 16, 16, 31");
	WriteNormInstr("b", ".L03_DoBinOpAddX");
	WriteALocalLabel("L04_DoBinOpAddX");
	WriteNormInstr("rlwinm", "r3, r3, 8, 24, 31");
	WriteALocalLabel("L03_DoBinOpAddX");
	WriteBlankLineToDestFile();
	WriteNormInstr("cntlzw", "r5, r3");
	WriteNormInstr("rlwinm", "r10, r5, 27, 5, 31");
	WriteNormInstr("and", "rFlag_z, rFlag_z, r10");
	WriteBlankLineToDestFile();
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubXm");
	WriteNormInstr("bl", ".DecodeAAs_xxxxdddxssxxxrrr");
	WriteNormInstr("b", ".DoBinOpSubX");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_SubXd");
	WriteNormInstr("bl", ".DecodeDD_xxxxdddxssxxxrrr");
	WriteAsmInstrComment("b\t.DoBinOpSubX");
	WriteALocalLabel("DoBinOpSubX");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("bl", ".ShiftBinArgs");
	WriteBlankLineToDestFile();
	WriteNormInstr("xori", "rFlag_x, rFlag_x, 1");
	WriteNormInstr("addic", "r5, rFlag_x, -1");
		WriteAsmIndentComment("load carry flag");
	WriteNormInstr("subfeo", "r3, r30, r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("mfxer", "r6");
	WriteNormInstr("rlwinm", "rFlag_c, r6, 3, 31, 31");
	WriteNormInstr("xori", "rFlag_c, rFlag_c, 1");
	WriteNormInstr("b", ".L01_DoBinOpAddX");
}

#pragma segment ASMgen3

LOCALPROC WritePPCasmMINEM68K3(void)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_RolopNM");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("addi", "r30, 0, 1");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("rlwinm", "r3, rOpCode, 23, 29, 31");
	WriteNormInstr("b", ".DoBinOp1notA");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_RolopDD");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".SetArgKindDReg");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("bl", ".SetArgKindDReg");
	WriteNormInstr("rlwinm", "r3, rOpCode, 29, 30, 31");
	WriteNormInstr("b", ".DoBinOp1notA");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_RolopND");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".octdat");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("bl", ".SetArgKindDReg");
	WriteNormInstr("rlwinm", "r3, rOpCode, 29, 30, 31");
	WriteAsmInstrComment("b\t.DoBinOp1notA");
	WriteALocalLabel("DoBinOp1notA");
	WriteNormInstr("rlwinm", "r3, r3, 1, 29, 30");
	WriteNormInstr("rlwimi", "r3, rOpCode, 24, 31, 31");
	WriteNormInstr("xori", "r31, r3, 1");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("addi", "r28, rDispatches, x_b2S9983");
	WriteNormInstr("rlwinm", "r4, r31, 2, 0, 29");
	WriteNormInstr("lwzx", "r4, r28, r4");
	WriteNormInstr("mtctr", "r4");
	WriteDestFileLn("\tbctr");
	WriteBlankLineToDestFile();
	WriteALocalLabel("L380");
	WriteNormalAsmComment("BinOpASL");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm.", "r8, r30, 0, 26, 31");
	WriteNormInstr("mr", "r6, r3");
	WriteNormInstr("bne", "cr0,.L385");
	WriteNormInstr("addi", "r4, 0, 0");
	WriteNormInstr("mr", "rFlag_c, r4");
	WriteNormInstr("b", ".L413");
	WriteALocalLabel("L385");
	WriteNormInstr("cmpli", "cr0, r8, 32");
	WriteNormInstr("bgt", "cr0,.B2SEL9898");
	WriteNormInstr("addi", "r5, r8, -1");
	WriteNormInstr("slw", "r7, r3, r5");
	WriteNormInstr("b", ".B2SEL9899");
	WriteALocalLabel("B2SEL9898");
	WriteNormInstr("addi", "r7, 0, 0");
	WriteALocalLabel("B2SEL9899");
	WriteNormInstr("cmpli", "cr6, rOpSize, 1");
	WriteNormInstr("bne", "cr6,.L397");
	WriteNormInstr("extsb", "r7, r7");
	WriteNormInstr("b", ".L402");
	WriteALocalLabel("L397");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L402");
	WriteNormInstr("extsh", "r7, r7");
	WriteALocalLabel("L402");
	WriteNormInstr("rlwinm", "r4, r7, 1, 31, 31");
	WriteNormInstr("mr", "rFlag_x, r4");
	WriteNormInstr("rlwinm", "r3, r7, 1, 0, 30");
	WriteNormInstr("mr", "rFlag_c, r4");
	WriteNormInstr("bne", "cr6,.L406");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L413");
	WriteALocalLabel("L406");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L413");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L413");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteNormInstr("bnl", "cr6,.B2SEL9896");
	WriteNormInstr("neg", "r5, r3");
	WriteNormInstr("srw", "r4, r5, r8");
	WriteNormInstr("neg", "r9, r4");
	WriteNormInstr("b", ".B2SEL9897");
	WriteALocalLabel("B2SEL9896");
	WriteNormInstr("srw", "r9, r3, r8");
	WriteALocalLabel("B2SEL9897");
	WriteNormInstr("mfcr", "r4");
	WriteNormInstr("subfc", "r7, r9, r6");
	WriteNormInstr("mfcr", "r5");
	WriteNormInstr("addic", "r0, r7, -1");
	WriteNormInstr("rlwinm", "r4, r4, 27, 31, 31");
	WriteNormInstr("mr", "rFlag_z, r4");
	WriteNormInstr("subfe", "rFlag_v, r0, r7");
	WriteNormInstr("rlwinm", "rFlag_n, r5, 25, 31, 31");
	WriteALocalLabel("L701");
	WriteNormInstr("mtcrf", "56, r29");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteALocalLabel("L423");
	WriteNormalAsmComment("BinOpASR");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("addi", "r4, 0, 0");
	WriteNormInstr("rlwinm", "r8, r3, 1, 31, 31");
	WriteNormInstr("mr", "rFlag_n, r8");
	WriteNormInstr("rlwinm.", "r8, r30, 0, 26, 31");
	WriteNormInstr("mr", "rFlag_v, r4");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteNormInstr("bne", "cr0,.L428");
	WriteNormInstr("addi", "r5, 0, 0");
	WriteNormInstr("mr", "rFlag_c, r5");
	WriteNormInstr("b", ".L455");
	WriteALocalLabel("L428");
	WriteNormInstr("bnl", "cr6,.L433");
	WriteNormInstr("nor", "r3, r3, r3");
	WriteALocalLabel("L433");
	WriteNormInstr("cmpi", "cr0, rOpSize, 1");
	WriteNormInstr("bne", "cr0,.L437");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("b", ".L442");
	WriteALocalLabel("L437");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L442");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteALocalLabel("L442");
	WriteNormInstr("cmpli", "cr0, r8, 32");
	WriteNormInstr("bgt", "cr0,.B2SEL9894");
	WriteNormInstr("addi", "r4, r8, -1");
	WriteNormInstr("srw", "r8, r3, r4");
	WriteNormInstr("b", ".B2SEL9895");
	WriteALocalLabel("B2SEL9894");
	WriteNormInstr("addi", "r8, 0, 0");
	WriteALocalLabel("B2SEL9895");
	WriteNormInstr("rlwinm", "r9, r8, 0, 31, 31");
	WriteNormInstr("mr", "rFlag_c, r9");
	WriteNormInstr("rlwinm", "r3, r8, 31, 1, 31");
	WriteNormInstr("bnl", "cr6,.L453");
	WriteNormInstr("cntlzw", "r5, r9");
	WriteNormInstr("nor", "r3, r3, r3");
	WriteNormInstr("rlwinm", "r9, r5, 27, 5, 31");
	WriteNormInstr("mr", "rFlag_c, r9");
	WriteALocalLabel("L453");
	WriteNormInstr("mr", "rFlag_x, r9");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteALocalLabel("L455");
	WriteNormInstr("mfcr", "r4");
	WriteNormInstr("rlwinm", "r4, r4, 27, 31, 31");
	WriteNormInstr("mr", "rFlag_z, r4");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L458");
	WriteNormalAsmComment("BinOpLSL");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm.", "r8, r30, 0, 26, 31");
	WriteNormInstr("bne", "cr0,.L463");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("b", ".L491");
	WriteALocalLabel("L463");
	WriteNormInstr("cmpli", "cr0, r8, 32");
	WriteNormInstr("bgt", "cr0,.B2SEL9892");
	WriteNormInstr("addi", "r4, r8, -1");
	WriteNormInstr("slw", "r8, r3, r4");
	WriteNormInstr("b", ".B2SEL9893");
	WriteALocalLabel("B2SEL9892");
	WriteNormInstr("addi", "r8, 0, 0");
	WriteALocalLabel("B2SEL9893");
	WriteNormInstr("cmpli", "cr6, rOpSize, 1");
	WriteNormInstr("bne", "cr6,.L475");
	WriteNormInstr("extsb", "r8, r8");
	WriteNormInstr("b", ".L480");
	WriteALocalLabel("L475");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L480");
	WriteNormInstr("extsh", "r8, r8");
	WriteALocalLabel("L480");
	WriteNormInstr("rlwinm", "rFlag_c, r8, 1, 31, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("rlwinm", "r3, r8, 1, 0, 30");
	WriteNormInstr("bne", "cr6,.L484");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L491");
	WriteALocalLabel("L484");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L491");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L491");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L494");
	WriteNormalAsmComment("BinOpLSR");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm.", "r8, r30, 0, 26, 31");
	WriteNormInstr("bne", "cr0,.L499");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("b", ".L518");
	WriteALocalLabel("L499");
	WriteNormInstr("cmpi", "cr0, rOpSize, 1");
	WriteNormInstr("bne", "cr0,.L504");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("b", ".L509");
	WriteALocalLabel("L504");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L509");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteALocalLabel("L509");
	WriteNormInstr("cmpli", "cr0, r8, 32");
	WriteNormInstr("bgt", "cr0,.B2SEL9890");
	WriteNormInstr("addi", "r4, r8, -1");
	WriteNormInstr("srw", "r9, r3, r4");
	WriteNormInstr("b", ".B2SEL9891");
	WriteALocalLabel("B2SEL9890");
	WriteNormInstr("addi", "r9, 0, 0");
	WriteALocalLabel("B2SEL9891");
	WriteNormInstr("rlwinm", "rFlag_c, r9, 0, 31, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("rlwinm", "r3, r9, 31, 1, 31");
	WriteALocalLabel("L518");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L521");
	WriteNormInstr("addi", "r8, 0, 1");
	WriteNormalAsmComment("BinOpROL");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm.", "r9, r30, 0, 26, 31");
	WriteNormInstr("bne", "cr0,.B2LP_9921");
	WriteNormInstr("addi", "r7, 0, 0");
	WriteNormInstr("mr", "rFlag_c, r7");
	WriteNormInstr("b", ".L549");
	WriteALocalLabel("B2LP_9921");
	WriteNormInstr("mtctr", "r9");
	WriteNormInstr("cmpli", "cr6, rOpSize, 1");
	WriteNormInstr("cmpli", "cr7, rOpSize, 2");
	WriteALocalLabel("B2LP_9863");
	WriteNormInstr("cmpi", "cr0, r3, 0");
	WriteNormInstr("rlwinm", "r9, r3, 1, 0, 30");
	WriteNormInstr("rlwinm", "r8, r3, 1, 31, 31");
	WriteNormInstr("mr", "r3, r9");
	WriteNormInstr("bnl", "cr0,.L534");
	WriteNormInstr("ori", "r3, r9, 1");
	WriteALocalLabel("L534");
	WriteNormInstr("bne", "cr6,.L538");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L543");
	WriteALocalLabel("L538");
	WriteNormInstr("bne", "cr7,.L543");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L543");
	WriteNormInstr("bdnz", ".B2LP_9863");
	WriteNormInstr("mr", "rFlag_c, r8");
	WriteALocalLabel("L549");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("cntlzw", "r5, r3");
	WriteNormInstr("rlwinm", "rFlag_z, r5, 27, 5, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L552");
	WriteNormalAsmComment("BinOpRXL");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("mr", "r9, rFlag_x");
	WriteNormInstr("rlwinm.", "r8, r30, 0, 26, 31");
	WriteNormInstr("bne", "cr0,.B2LP_9923");
	WriteNormInstr("mr", "rFlag_c, r9");
	WriteNormInstr("b", ".L580");
	WriteALocalLabel("B2LP_9923");
	WriteNormInstr("mtctr", "r8");
	WriteNormInstr("cmpli", "cr6, rOpSize, 1");
	WriteNormInstr("cmpli", "cr7, rOpSize, 2");
	WriteALocalLabel("B2LP_9865");
	WriteNormInstr("cmpi", "cr0, r9, 0");
	WriteNormInstr("mr", "r8, r3");
	WriteNormInstr("rlwinm", "r7, r8, 1, 31, 31");
	WriteNormInstr("rlwinm", "r3, r8, 1, 0, 30");
	WriteNormInstr("beq", "cr0,.L565");
	WriteNormInstr("ori", "r3, r3, 1");
	WriteALocalLabel("L565");
	WriteNormInstr("bne", "cr6,.L569");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L574");
	WriteALocalLabel("L569");
	WriteNormInstr("bne", "cr7,.L574");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L574");
	WriteNormInstr("rlwinm", "r9, r8, 1, 31, 31");
	WriteNormInstr("bdnz", ".B2LP_9865");
	WriteNormInstr("mr", "rFlag_c, r7");
	WriteNormInstr("mr", "rFlag_x, r9");
	WriteALocalLabel("L580");
	WriteNormInstr("addi", "r6, 0, 0");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("mr", "rFlag_v, r6");
	WriteNormInstr("rlwinm", "r4, r4, 27, 5, 31");
	WriteNormInstr("mr", "rFlag_z, r4");
	WriteNormInstr("rlwinm", "r5, r3, 1, 31, 31");
	WriteNormInstr("mr", "rFlag_n, r5");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L583");
	WriteNormInstr("addi", "r8, 0, 1");
	WriteNormalAsmComment("BinOpROR");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm.", "r7, r30, 0, 26, 31");
	WriteNormInstr("bne", "cr0,.L588");
	WriteNormInstr("addi", "r4, 0, 0");
	WriteNormInstr("mr", "rFlag_c, r4");
	WriteNormInstr("b", ".L620");
	WriteALocalLabel("L588");
	WriteNormInstr("cmpli", "cr6, rOpSize, 1");
	WriteNormInstr("bne", "cr6,.L593");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("b", ".B2LP_9920");
	WriteALocalLabel("L593");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.B2LP_9920");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteALocalLabel("B2LP_9920");
	WriteNormInstr("mtctr", "r7");
	WriteNormInstr("rlwinm", "r5, rOpSize, 3, 0, 28");
	WriteNormInstr("addi", "r5, r5, -1");
	WriteNormInstr("slw", "r8, r8, r5");
	WriteNormInstr("b", ".B2LP_9862");
	WriteALocalLabel("B2LP_9878");
	WriteNormInstr("beq", "cr0,.B2LP_9862");
	WriteNormInstr("or", "r3, r8, r3");
	WriteALocalLabel("B2LP_9862");
	WriteNormInstr("rlwinm", "r4, r3, 0, 31, 31");
	WriteNormInstr("cmpli", "cr0, r4, 0");
	WriteNormInstr("addic", "r5, r4, -1");
	WriteNormInstr("rlwinm", "r3, r3, 31, 1, 31");
	WriteNormInstr("subfe", "r7, r5, r4");
	WriteNormInstr("bdnz", ".B2LP_9878");
	WriteNormInstr("beq", "cr0,.B2L_9875");
	WriteNormInstr("or", "r3, r8, r3");
	WriteALocalLabel("B2L_9875");
	WriteNormInstr("mr", "rFlag_c, r7");
	WriteNormInstr("bne", "cr6,.L613");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L620");
	WriteALocalLabel("L613");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L620");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L620");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("cntlzw", "r6, r3");
	WriteNormInstr("rlwinm", "rFlag_z, r6, 27, 5, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L623");
	WriteNormInstr("addi", "r8, 0, 1");
	WriteNormalAsmComment("BinOpRXR");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm.", "r6, r30, 0, 26, 31");
	WriteNormInstr("bne", "cr0,.L628");
	WriteNormInstr("mr", "rFlag_c, rFlag_x");
	WriteNormInstr("b", ".L660");
	WriteALocalLabel("L628");
	WriteNormInstr("cmpli", "cr6, rOpSize, 1");
	WriteNormInstr("bne", "cr6,.L633");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("b", ".B2LP_9922");
	WriteALocalLabel("L633");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.B2LP_9922");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteALocalLabel("B2LP_9922");
	WriteNormInstr("mtctr", "r6");
	WriteNormInstr("rlwinm", "r4, rOpSize, 3, 0, 28");
	WriteNormInstr("mr", "r7, rFlag_x");
	WriteNormInstr("addi", "r4, r4, -1");
	WriteNormInstr("slw", "r6, r8, r4");
	WriteNormInstr("b", ".B2LP_9864");
	WriteALocalLabel("B2LP_9880");
	WriteNormInstr("beq", "cr0,.L645");
	WriteNormInstr("or", "r3, r6, r3");
	WriteALocalLabel("L645");
	WriteNormInstr("rlwinm.", "r5, r8, 0, 31, 31");
	WriteNormInstr("addic", "r4, r5, -1");
	WriteNormInstr("subfe", "r7, r4, r5");
	WriteALocalLabel("B2LP_9864");
	WriteNormInstr("cmpi", "cr0, r7, 0");
	WriteNormInstr("mr", "r8, r3");
	WriteNormInstr("rlwinm", "r5, r8, 0, 31, 31");
	WriteNormInstr("rlwinm", "r3, r8, 31, 1, 31");
	WriteNormInstr("addic", "r10, r5, -1");
	WriteNormInstr("subfe", "r5, r10, r5");
	WriteNormInstr("bdnz", ".B2LP_9880");
	WriteNormInstr("beq", "cr0,.B2L_9877");
	WriteNormInstr("or", "r3, r6, r3");
	WriteALocalLabel("B2L_9877");
	WriteNormInstr("mr", "rFlag_c, r5");
	WriteNormInstr("rlwinm.", "r4, r8, 0, 31, 31");
	WriteNormInstr("addic", "r6, r4, -1");
	WriteNormInstr("subfe", "rFlag_x, r6, r4");
	WriteNormInstr("bne", "cr6,.L653");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L660");
	WriteALocalLabel("L653");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L660");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L660");
	WriteNormInstr("cntlzw", "r7, r3");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("rlwinm", "rFlag_z, r7, 27, 5, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("b", ".L701");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_BitOpDD");
	WriteALocalLabel("DoIKind_BitOpDM");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".SetArgKindDReg");
	WriteNormInstr("b", ".preDoBinBitOp1");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_BitOpND");
	WriteALocalLabel("DoIKind_BitOpNM");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("bl", ".SetArgKindImmediate");
	WriteAsmInstrComment("b\t.preDoBinBitOp1");
	WriteALocalLabel("preDoBinBitOp1");
	WriteNormInstr("rlwinm", "r5, rOpCode, 29, 29, 31");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("rlwinm", "r7, rOpCode, 26, 30, 31");
	WriteNormInstr("addi", "r7, r7, 17");
	WriteNormalAsmComment("DoBinBitOp1 (r2 in opcode)");
	WriteNormInstr("mr", "r30, r5");
	WriteNormInstr("mr", "r29, r7");
	WriteNormInstr("cmpli", "cr0, r30, 0");
	WriteNormInstr("bne", "cr0,.L801");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteALocalLabel("L801");
	WriteNormInstr("beq", "cr0,.B2SEL9854");
	WriteNormInstr("rlwinm", "r28, r3, 0, 29, 31");
	WriteNormInstr("b", ".B2SEL9855");
	WriteALocalLabel("B2SEL9854");
	WriteNormInstr("rlwinm", "r28, r3, 0, 27, 31");
	WriteALocalLabel("B2SEL9855");
	WriteNormInstr("mr", "r3, r30");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("addi", "r30, 0, 1");
	WriteNormInstr("slw", "r30, r30, r28");
	WriteNormInstr("cmpi", "cr0, r29, 17");
	WriteNormInstr("and", "r4, r30, r3");
	WriteNormInstr("cntlzw", "r5, r4");
	WriteNormInstr("rlwinm", "rFlag_z, r5, 27, 5, 31");
	WriteNormInstr("beq", "cr0,.m68k_NextInstruction");
	WriteNormInstr("cmpi", "cr0, r29, 18");
	WriteNormInstr("beq", "cr0,.L818");
	WriteNormInstr("cmpi", "cr0, r29, 19");
	WriteNormInstr("beq", "cr0,.L820");
	WriteNormInstr("or", "r3, r30, r3");
	WriteNormInstr("b", ".SetArgValue");
	WriteALocalLabel("L818");
	WriteNormInstr("xor", "r3, r30, r3");
	WriteNormInstr("b", ".SetArgValue");
	WriteALocalLabel("L820");
	WriteNormInstr("andc", "r3, r3, r30");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AndDEa");
	WriteNormInstr("bl", ".DecodeDEa_xxxxdddxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpAnd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AndEaD");
	WriteNormInstr("bl", ".DecodeEaD_xxxxdddxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpAnd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_AndI");
	WriteNormInstr("bl", ".DecodeI_xxxxxxxxssmmmrrr");
	WriteAsmInstrComment("b\t.DoBinOpAnd");
	WriteALocalLabel("DoBinOpAnd");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("and", "r3, r30, r3");
	WriteNormInstr("b", ".SetCCRandArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_OrI");
	WriteNormInstr("bl", ".DecodeI_xxxxxxxxssmmmrrr");
	WriteNormInstr("b", ".DoBinOr");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_OrDEa");
	WriteNormInstr("bl", ".DecodeDEa_xxxxdddxssmmmrrr");
	WriteNormInstr("b", ".DoBinOr");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_OrEaD");
	WriteNormInstr("bl", ".DecodeEaD_xxxxdddxssmmmrrr");
	WriteAsmInstrComment("b\t.DoBinOr");
	WriteALocalLabel("DoBinOr");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("or", "r3, r30, r3");
	WriteNormInstr("b", ".SetCCRandArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_EorI");
	WriteNormInstr("bl", ".DecodeI_xxxxxxxxssmmmrrr");
	WriteNormInstr("b", ".DoBinOpEor");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Eor");
	WriteNormInstr("bl", ".DecodeDEa_xxxxdddxssmmmrrr");
	WriteAsmInstrComment("b\t.DoBinOpEor");
	WriteALocalLabel("DoBinOpEor");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("xor", "r3, r30, r3");
	WriteNormInstr("b", ".SetCCRandArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Not");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("nor", "r3, r3, r3");
	WriteNormInstr("cmpi", "cr0, rOpSize, 1");
	WriteNormInstr("bne", "cr0,.L877");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".SetCCRandArgValue");
	WriteALocalLabel("L877");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.SetCCRandArgValue");
	WriteNormInstr("extsh", "r3, r3");
	WriteNormInstr("b", ".SetCCRandArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Scc");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".cctrue");
	WriteNormInstr("mr", "r0, r3");
	WriteNormInstr("addic", "r12, r0, -1");
	WriteNormInstr("subfe", "r3, r12, r0");
	WriteNormInstr("neg", "r3, r3");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_EXTL");
	WriteNormInstr("rlwinm", "r7, rOpCode, 2, 27, 29");
	WriteNormInstr("lwzx", "r5, r7, rRegs");
	WriteNormInstr("extsh", "r3, r5");
	WriteNormInstr("stwx", "r3, r7, rRegs");
	WriteNormInstr("b", ".SetCCRandNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_EXTW");
	WriteNormInstr("rlwinm", "r7, rOpCode, 2, 27, 29");
	WriteNormInstr("lwzx", "r5, r7, rRegs");
	WriteNormInstr("extsb", "r3, r5");
	WriteNormInstr("rlwimi", "r5, r3, 0, 16, 31");
	WriteNormInstr("stwx", "r5, r7, rRegs");
	WriteNormInstr("b", ".SetCCRandNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Neg");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r8, r3");
	WriteNormInstr("cmpi", "cr0, rOpSize, 1");
	WriteNormInstr("neg", "r3, r3");
	WriteNormInstr("bne", "cr0,.L864");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L869");
	WriteALocalLabel("L864");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L869");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L869");
	WriteNormInstr("cmpi", "cr7, r8, 0");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("bnl", "cr7,.L928");
	WriteNormInstr("blt", "cr6,.L926");
	WriteALocalLabel("L928");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("b", ".L927");
	WriteALocalLabel("L926");
	WriteNormInstr("addi", "rFlag_v, 0, 1");
	WriteALocalLabel("L927");
	WriteNormInstr("blt", "cr7,.L929");
	WriteNormInstr("blt", "cr6,.L929");
	WriteNormInstr("addi", "r9, 0, 0");
	WriteNormInstr("b", ".L930");
	WriteALocalLabel("L929");
	WriteNormInstr("addi", "r9, 0, 1");
	WriteALocalLabel("L930");
	WriteNormInstr("rlwinm", "rFlag_c, r9, 0, 24, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_NegX");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("cmpi", "cr7, r3, 0");
	WriteNormInstr("addic", "r4, rFlag_x, -1");
	WriteNormInstr("cmpi", "cr0, rOpSize, 1");
	WriteNormInstr("subfe", "r0, r4, rFlag_x");
	WriteNormInstr("add", "r5, r3, r0");
	WriteNormInstr("neg", "r3, r5");
	WriteNormInstr("bne", "cr0,.L847");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L852");
	WriteALocalLabel("L847");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L852");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L852");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteNormInstr("beq", "cr6,.L856");
	WriteNormInstr("addi", "rFlag_z, 0, 0");
	WriteALocalLabel("L856");
	WriteNormInstr("mfcr", "r4");
	WriteNormInstr("rlwinm", "rFlag_n, r4, 25, 31, 31");
	WriteNormInstr("bnl", "cr7,.L923");
	WriteNormInstr("blt", "cr6,.L921");
	WriteALocalLabel("L923");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("b", ".L922");
	WriteALocalLabel("L921");
	WriteNormInstr("addi", "rFlag_v, 0, 1");
	WriteALocalLabel("L922");
	WriteNormInstr("blt", "cr7,.L924");
	WriteNormInstr("blt", "cr6,.L924");
	WriteNormInstr("addi", "r9, 0, 0");
	WriteNormInstr("b", ".L925");
	WriteALocalLabel("L924");
	WriteNormInstr("addi", "r9, 0, 1");
	WriteALocalLabel("L925");
	WriteNormInstr("rlwinm", "rFlag_c, r9, 0, 24, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("b", ".SetArgValue");
}

#pragma segment ASMgen4

LOCALPROC WritePPCasmMINEM68K4(void)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MulU");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("rlwinm", "r8, r3, 0, 16, 31");
	WriteNormInstr("rlwinm", "r4, r29, 0, 16, 31");
	WriteNormInstr("mullw", "r3, r8, r4");
	WriteALocalLabel("SetFlagsAndArgValL");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteNormInstr("b", ".SetCCRandArgValue");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MulS");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("extsh", "r8, r3");
	WriteNormInstr("extsh", "r4, r29");
	WriteNormInstr("mullw", "r3, r8, r4");
	WriteNormInstr("b", ".SetFlagsAndArgValL");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_DivU");
	WriteALocalLabel("DoIKind_DivS");
	WriteNormInstr("rlwinm", "r8, rOpCode, 24, 31, 31");
	WriteAsmInstrComment("b8 in r8");
	WriteNormInstr("addic", "r7, r8, -1");
	WriteNormInstr("rlwinm", "r3, rOpCode, 29, 29, 31");
	WriteNormInstr("subfe", "r31, r7, r8");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormalAsmComment("DoBinOpDiv1 (r2 in opcode, binop in r31)");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("addi", "rOpSize, 0, 4");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("cmpi", "cr0, r30, 0");
	WriteNormInstr("beq-", "cr0,.L963");
	WriteNormInstr("cmpi", "cr0, r31, 0");
	WriteNormInstr("beq", "cr0,.L967");
	WriteNormInstr("extsh", "r11, r30");
	WriteNormInstr("divw", "r6, r29, r11");
	WriteNormInstr("mullw", "r10, r30, r6");
	WriteNormInstr("subf", "r12, r10, r29");
	WriteNormInstr("rlwinm", "r7, r12, 0, 16, 31");
	WriteNormInstr("mullw", "r5, r6, r11");
	WriteNormInstr("subf", "r5, r5, r29");
	WriteNormInstr("rlwinm.", "r4, r6, 0, 0, 16");
	WriteNormInstr("beq", "cr0,.L983");
	WriteNormInstr("addis", "r31, r4, 1");
	WriteNormInstr("addi", "r31, r31, -32768");
	WriteNormInstr("cmpi", "cr0, r31, 0");
	WriteNormInstr("beq", "cr0,.L983");
	WriteNormInstr("addi", "rFlag_n, 0, 1");
	WriteNormInstr("addi", "rFlag_v, 0, 1");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("b", ".L997");
	WriteALocalLabel("L967");
	WriteNormInstr("rlwinm", "r7, r30, 0, 16, 31");
	WriteNormInstr("addis", "r0, 0, 1");
	WriteNormInstr("divwu", "r6, r29, r7");
	WriteNormInstr("cmpl", "cr0, r6, r0");
	WriteNormInstr("blt", "cr0,.L972");
	WriteNormInstr("addi", "rFlag_n, 0, 1");
	WriteNormInstr("addi", "rFlag_v, 0, 1");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("b", ".L997");
	WriteALocalLabel("L972");
	WriteNormInstr("divwu", "r5, r29, r7");
	WriteNormInstr("mullw", "r8, r7, r5");
	WriteNormInstr("subf", "r7, r8, r29");
	WriteNormInstr("b", ".L986");
	WriteALocalLabel("L983");
	WriteNormInstr("extsh", "r3, r5");
	WriteNormInstr("rlwinm", "r4, r29, 1, 31, 31");
	WriteNormInstr("rlwinm", "r3, r3, 1, 31, 31");
	WriteNormInstr("cmp", "cr0, r3, r4");
	WriteNormInstr("beq", "cr0,.L986");
	WriteNormInstr("neg", "r8, r5");
	WriteNormInstr("rlwinm", "r7, r8, 0, 16, 31");
	WriteALocalLabel("L986");
	WriteNormInstr("extsh", "r3, r6");
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteNormInstr("mr", "r29, r6");
	WriteNormInstr("rlwimi", "r29, r7, 16, 0, 15");
	WriteALocalLabel("L997");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("b", ".SetArgValue");
	WriteALocalLabel("L963");
	WriteNormInstr("addi", "r3, 0, 5");
	WriteNormInstr("b", ".ExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Exgdd");
	WriteNormInstr("rlwinm", "r7, rOpCode, 25, 27, 29");
	WriteNormInstr("rlwinm", "r9, rOpCode, 2, 27, 29");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwzx", "r0, r7, rRegs");
	WriteNormInstr("lwzx", "r3, r9, rRegs");
	WriteNormInstr("stwx", "r3, r7, rRegs");
	WriteNormInstr("stwx", "r0, r9, rRegs");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Exgaa");
	WriteNormInstr("rlwinm", "r7, rOpCode, 25, 27, 29");
	WriteNormInstr("add", "r6, r7, rRegs");
	WriteNormInstr("rlwinm", "r9, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r5, r9, rRegs");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "r4, 32(r6)");
	WriteNormInstr("lwz", "r3, 32(r5)");
	WriteNormInstr("stw", "r3, 32(r6)");
	WriteNormInstr("stw", "r4, 32(r5)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Exgda");
	WriteNormInstr("rlwinm", "r4, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r5, r4, rRegs");
	WriteNormInstr("rlwinm", "r7, rOpCode, 25, 27, 29");
	WriteNormInstr("lwz", "r6, 32(r5)");
	WriteNormInstr("lwzx", "r3, r7, rRegs");
	WriteNormInstr("stwx", "r6, r7, rRegs");
	WriteNormInstr("stw", "r3, 32(r5)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("m68k_setCR");
	WriteNormInstr("rlwinm", "rFlag_x, r3, 28, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 29, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_z, r3, 30, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_v, r3, 31, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_c, r3, 0, 31, 31");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("NeedToGetOut");
	WriteNormInstr("mr", "r12, rMaxInstrsToGo");
	WriteNormInstr("cmpi", "cr0, r12, 0");
	WriteNormInstr("beqlr", "cr0");
	WriteNormInstr("lwz", "r0, fReg_MoreInstrs(rRegs)");
	WriteNormInstr("addi", "r4, 0, 1");
	WriteNormInstr("mr", "rMaxInstrsToGo, r4");
	WriteNormInstr("add", "r3, r0, r12");
	WriteNormInstr("addi", "r3, r3, -1");
	WriteNormInstr("stw", "r3, fReg_MoreInstrs(rRegs)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("SetExternalInterruptPending");
	WriteNormInstr("addi", "r3, 0, 1");
	WriteNormInstr("stb", "r3, fReg_ExtIntPend(rRegs)");
	WriteNormInstr("b", ".NeedToGetOut");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("m68k_setSR");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "r31, -24(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -80(sp)");
	WriteNormInstr("rlwinm", "r31, r3, 0, 16, 31");
	WriteNormInstr("lbz", "r5, fReg_s(rRegs)");
	WriteNormInstr("rlwinm", "r4, r31, 19, 31, 31");
	WriteNormInstr("cmp", "cr0, r5, r4");
	WriteNormInstr("stb", "r4, fReg_s(rRegs)");
	WriteAsmInstrComment("rlwinm\tr6, r31, 20, 31, 31");
	WriteAsmInstrComment("stb\tr6, fReg_m(rRegs)");
	WriteNormInstr("beq", "cr0,.L67");
	WriteNormInstr("lwz", "r8, fReg_A7(rRegs)");
	WriteNormInstr("cmpi", "cr0, r5, 0");
	WriteNormInstr("beq", "cr0,.L62");
	WriteNormInstr("lwz", "r0, fReg_usp(rRegs)");
	WriteNormInstr("stw", "r8, fReg_isp(rRegs)");
	WriteNormInstr("stw", "r0, fReg_A7(rRegs)");
	WriteNormInstr("b", ".L67");
	WriteALocalLabel("L62");
	WriteNormInstr("lwz", "r3, fReg_isp(rRegs)");
	WriteNormInstr("stw", "r8, fReg_usp(rRegs)");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteALocalLabel("L67");
	WriteNormInstr("mr", "r3, r31");
	WriteNormInstr("bl", ".m68k_setCR");
	WriteNormInstr("lwz", "r12, fReg_intmask(rRegs)");
	WriteNormInstr("rlwinm", "r6, r31, 24, 29, 31");
	WriteNormInstr("stw", "r6, fReg_intmask(rRegs)");
	WriteNormInstr("cmp", "cr0, r6, r12");
	WriteNormInstr("beq", "cr0,.L71");
	WriteNormInstr("bl", ".SetExternalInterruptPending");
	WriteALocalLabel("L71");
	WriteNormInstr("rlwinm", "r6, r31, 17, 31, 31");
	WriteNormInstr("stb", "r6, fReg_t1(rRegs)");
	WriteNormInstr("cmpi", "cr0, r6, 0");
	WriteNormInstr("beq", "cr0,.B2LEP9988");
	WriteAsmInstrComment("bne\tcr0,.L75");
	WriteAsmInstrComment("addi\tr6, 0, 0");
	WriteAsmInstrComment("stb\tr6, fReg_TracePend(rRegs)");
	WriteAsmInstrComment("b\t.B2LEP9988");
	WriteNormalAsmComment(".L75:");
	WriteNormInstr("bl", ".NeedToGetOut");
	WriteALocalLabel("B2LEP9988");
	WriteNormInstr("lwz", "r0, 88(sp)");
	WriteNormInstr("addi", "sp, sp, 80");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "r31, -24(sp)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveCCREa");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".m68k_getSR");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveEaCCR");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteNormInstr("bl", ".m68k_setCR");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveSREa");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".m68k_getSR");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveEaSR");
	WriteNormInstr("addi", "rOpSize, 0, 2");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteNormInstr("bl", ".m68k_setSR");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_BinOpStatusCCR");
	WriteNormInstr("rlwinm.", "r29, rOpCode, 26, 30, 31");
	WriteNormInstr("beq", "cr0,.L1148");
	WriteNormInstr("lbz", "r28, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r28, 0");
	WriteNormInstr("bne", "cr0,.L1148");
	WriteNormInstr("addi", "r3, 0, 8");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteALocalLabel("L1148");
	WriteNormInstr("bl", ".FindOpSizeFromb76");
	WriteBlankLineToDestFile();
	WriteAsmInstrComment("r29=IsStatus");
	WriteNormInstr("lhzu", "r30, 2(rPC_p)");
		WriteAsmIndentComment("sign extension would");
		WriteAsmIndentComment("have no effect.");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".m68k_getSR");
	WriteBlankLineToDestFile();
	WriteNormInstr("rlwinm", "r31, rOpCode, 23, 29, 31");
	WriteNormInstr("cmpi", "cr0, r31, 1");
	WriteNormInstr("bgt", "cr0, .BinOpStatusCCR_Eor");
		WriteAsmIndentComment("r31 must be 5");
	WriteNormInstr("blt", "cr0, .BinOpStatusCCR_Or");
		WriteAsmIndentComment("r31 must be 0");
	WriteBlankLineToDestFile();
	WriteALocalLabel("BinOpStatusCCR_And");
	WriteNormInstr("and", "r3, r30, r3");
	WriteNormInstr("b", ".BinOpStatusCCR_Store");
	WriteALocalLabel("BinOpStatusCCR_Eor");
	WriteNormInstr("xor", "r3, r30, r3");
	WriteNormInstr("b", ".BinOpStatusCCR_Store");
	WriteALocalLabel("BinOpStatusCCR_Or");
	WriteNormInstr("or", "r3, r30, r3");
	WriteALocalLabel("BinOpStatusCCR_Store");
	WriteNormInstr("cmpi", "cr0, r29, 0");
	WriteNormInstr("bne", "cr0,.BinOpStatusCCR_SetSR");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".m68k_setCR");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteALocalLabel("BinOpStatusCCR_SetSR");
	WriteNormInstr("bl", ".m68k_setSR");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MOVEMRmMW");
	WriteALocalLabel("DoIKind_MOVEMrm");
	WriteALocalLabel("DoIKind_MOVEMRmML");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("b", ".pre_reglist");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MOVEMApRW");
	WriteALocalLabel("DoIKind_MOVEMApRL");
	WriteALocalLabel("DoIKind_MOVEMmr");
	WriteNormInstr("addi", "r3, 0, 1");
	WriteNormInstr("b", ".pre_reglist");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("pre_reglist");
	WriteNormInstr("rlwinm", "r8, rOpCode, 27, 29, 30");
	WriteNormInstr("addi", "rOpSize, r8, -2");
	WriteNormalAsmComment(".reglist:");
	WriteNormInstr("rlwinm", "r4, rOpCode, 29, 29, 31");
	WriteNormInstr("rlwinm", "r5, rOpCode, 0, 29, 31");
	WriteNormInstr("extsh", "r30, r3");
	WriteNormInstr("cmpi", "cr0, r4, 3");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("mr", "r31, r3");
	WriteNormInstr("beq", "cr0,.L1193");
	WriteNormInstr("cmpi", "cr0, r4, 4");
	WriteNormInstr("beq", "cr0,.L1230");
	WriteNormInstr("b", ".L1267");
	WriteALocalLabel("L1193");
	WriteNormInstr("cmpi", "cr0, r30, 1");
	WriteNormInstr("addi", "r28, 0, 1");
	WriteNormInstr("bne", "cr0,.m68k_NextInstruction");
	WriteNormInstr("rlwinm", "r6, r5, 2, 0, 29");
	WriteNormInstr("add", "r12, r6, rRegs");
	WriteNormInstr("lwz", "r9, 32(r12)");
	WriteNormInstr("stw", "r12, fReg_RgLstTmp(rRegs)");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("mr", "r29, r9");
	WriteNormInstr("bne", "cr0,.L1211");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteALocalLabel("B2LP_9718");
	WriteNormInstr("slw", "r8, r28, r30");
	WriteNormInstr("and.", "r3, r31, r8");
	WriteNormInstr("beq", "cr0,.L1205");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".get_word");
	WriteNormInstr("rlwinm", "r12, r30, 2, 0, 29");
	WriteNormInstr("addi", "r29, r29, 2");
	WriteNormInstr("stwx", "r3, r12, rRegs");
	WriteNormInstr("mr", "r9, r29");
	WriteALocalLabel("L1205");
	WriteNormInstr("addi", "r0, r30, 1");
	WriteNormInstr("extsh", "r30, r0");
	WriteNormInstr("cmpi", "cr0, r30, 16");
	WriteNormInstr("blt", "cr0,.B2LP_9718");
	WriteNormInstr("b", ".L1226");
	WriteALocalLabel("L1211");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteALocalLabel("B2LP_9719");
	WriteNormInstr("slw", "r3, r28, r30");
	WriteNormInstr("and.", "r4, r31, r3");
	WriteNormInstr("beq", "cr0,.L1220");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("rlwinm", "r12, r30, 2, 0, 29");
	WriteNormInstr("stwx", "r3, r12, rRegs");
	WriteNormInstr("addi", "r29, r29, 4");
	WriteNormInstr("mr", "r9, r29");
	WriteALocalLabel("L1220");
	WriteNormInstr("addi", "r0, r30, 1");
	WriteNormInstr("extsh", "r30, r0");
	WriteNormInstr("cmpi", "cr0, r30, 16");
	WriteNormInstr("blt", "cr0,.B2LP_9719");
	WriteALocalLabel("L1226");
	WriteNormInstr("lwz", "r12, fReg_RgLstTmp(rRegs)");
	WriteNormInstr("stw", "r9, 32(r12)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1230");
	WriteNormInstr("cmpi", "cr0, r30, 0");
	WriteNormInstr("bne", "cr0,.m68k_NextInstruction");
	WriteNormInstr("rlwinm", "r3, r5, 2, 0, 29");
	WriteNormInstr("add", "r12, r3, rRegs");
	WriteNormInstr("lwz", "r9, 32(r12)");
	WriteNormInstr("stw", "r12, fReg_RgLstTmp(rRegs)");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("addi", "r28, 0, 1");
	WriteNormInstr("bne", "cr0,.L1248");
	WriteNormInstr("addi", "r30, 0, 15");
	WriteALocalLabel("B2LP_9716");
	WriteNormInstr("subfic", "r8, r30, 15");
	WriteNormInstr("slw", "r3, r28, r8");
	WriteNormInstr("and.", "r4, r31, r3");
	WriteNormInstr("beq", "cr0,.L1242");
	WriteNormInstr("addi", "r3, r9, -2");
	WriteNormInstr("rlwinm", "r5, r30, 2, 0, 29");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("lwzx", "r4, r5, rRegs");
	WriteNormInstr("bl", ".put_word");
	WriteNormInstr("mr", "r9, r29");
	WriteALocalLabel("L1242");
	WriteNormInstr("addi", "r0, r30, -1");
	WriteNormInstr("extsh.", "r30, r0");
	WriteNormInstr("bnl", "cr0,.B2LP_9716");
	WriteNormInstr("b", ".L1263");
	WriteALocalLabel("L1248");
	WriteNormInstr("addi", "r30, 0, 15");
	WriteALocalLabel("B2LP_9717");
	WriteNormInstr("subfic", "r3, r30, 15");
	WriteNormInstr("slw", "r4, r28, r3");
	WriteNormInstr("and.", "r5, r31, r4");
	WriteNormInstr("beq", "cr0,.L1257");
	WriteNormInstr("addi", "r3, r9, -4");
	WriteNormInstr("rlwinm", "r6, r30, 2, 0, 29");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("lwzx", "r4, r6, rRegs");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("mr", "r9, r29");
	WriteALocalLabel("L1257");
	WriteNormInstr("addi", "r0, r30, -1");
	WriteNormInstr("extsh.", "r30, r0");
	WriteNormInstr("bnl", "cr0,.B2LP_9717");
	WriteALocalLabel("L1263");
	WriteNormInstr("lwz", "r12, fReg_RgLstTmp(rRegs)");
	WriteNormInstr("stw", "r9, 32(r12)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1267");
	WriteNormInstr("mr", "r3, r4");
	WriteNormInstr("mr", "r4, r5");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("mr", "r29, rArgAddr");
	WriteNormInstr("cmpi", "cr0, r30, 0");
	WriteNormInstr("cmpli", "cr6, rOpSize, 2");
	WriteNormInstr("addi", "r28, 0, 1");
	WriteNormInstr("bne", "cr0,.L1304");
	WriteNormInstr("bne", "cr6,.L1287");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteALocalLabel("B2LP_9712");
	WriteNormInstr("slw", "r3, r28, r30");
	WriteNormInstr("and.", "r4, r31, r3");
	WriteNormInstr("beq", "cr0,.L1281");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("rlwinm", "r5, r30, 2, 0, 29");
	WriteNormInstr("lwzx", "r4, r5, rRegs");
	WriteNormInstr("bl", ".put_word");
	WriteNormInstr("addi", "r29, r29, 2");
	WriteALocalLabel("L1281");
	WriteNormInstr("addi", "r0, r30, 1");
	WriteNormInstr("extsh", "r30, r0");
	WriteNormInstr("cmpi", "cr0, r30, 16");
	WriteNormInstr("blt", "cr0,.B2LP_9712");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1287");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteALocalLabel("B2LP_9713");
	WriteNormInstr("slw", "r3, r28, r30");
	WriteNormInstr("and.", "r4, r31, r3");
	WriteNormInstr("beq", "cr0,.L1296");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("rlwinm", "r5, r30, 2, 0, 29");
	WriteNormInstr("lwzx", "r4, r5, rRegs");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("addi", "r29, r29, 4");
	WriteALocalLabel("L1296");
	WriteNormInstr("addi", "r0, r30, 1");
	WriteNormInstr("extsh", "r30, r0");
	WriteNormInstr("cmpi", "cr0, r30, 16");
	WriteNormInstr("blt", "cr0,.B2LP_9713");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1304");
	WriteNormInstr("bne", "cr6,.L1321");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteALocalLabel("B2LP_9714");
	WriteNormInstr("slw", "r3, r28, r30");
	WriteNormInstr("and.", "r4, r31, r3");
	WriteNormInstr("beq", "cr0,.L1315");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".get_word");
	WriteNormInstr("rlwinm", "r12, r30, 2, 0, 29");
	WriteNormInstr("addi", "r29, r29, 2");
	WriteNormInstr("stwx", "r3, r12, rRegs");
	WriteALocalLabel("L1315");
	WriteNormInstr("addi", "r0, r30, 1");
	WriteNormInstr("extsh", "r30, r0");
	WriteNormInstr("cmpi", "cr0, r30, 16");
	WriteNormInstr("blt", "cr0,.B2LP_9714");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1321");
	WriteNormInstr("addi", "r30, 0, 0");
	WriteALocalLabel("B2LP_9715");
	WriteNormInstr("slw", "r3, r28, r30");
	WriteNormInstr("and.", "r4, r31, r3");
	WriteNormInstr("beq", "cr0,.L1330");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("rlwinm", "r12, r30, 2, 0, 29");
	WriteNormInstr("stwx", "r3, r12, rRegs");
	WriteNormInstr("addi", "r29, r29, 4");
	WriteALocalLabel("L1330");
	WriteNormInstr("addi", "r0, r30, 1");
	WriteNormInstr("extsh", "r30, r0");
	WriteNormInstr("cmpi", "cr0, r30, 16");
	WriteNormInstr("blt", "cr0,.B2LP_9715");
	WriteNormInstr("b", ".m68k_NextInstruction");
}

#pragma segment ASMgen5

LOCALPROC WritePPCasmMINEM68K5(void)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Abcdr");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("addi", "r5, 0, 0");
	WriteNormInstr("rlwinm", "r6, rOpCode, 23, 29, 31");
	WriteNormInstr("mr", "r29, r5");
	WriteNormInstr("mr", "r28, r6");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("mr", "r4, r28");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteBlankLineToDestFile();
	WriteNormInstr("b", ".DoBinOpAbcd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Abcdm");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("addi", "r5, 0, 4");
	WriteNormInstr("rlwinm", "r6, rOpCode, 23, 29, 31");
	WriteNormInstr("mr", "r29, r5");
	WriteNormInstr("mr", "r28, r6");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("mr", "r4, r28");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteBlankLineToDestFile();
	WriteNormInstr("b", ".DoBinOpAbcd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoBinOpAbcd");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormalAsmComment("BinOpAddBCD");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm", "r6, r30, 0, 28, 31");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteNormInstr("addic", "r11, rFlag_x, -1");
	WriteNormInstr("rlwinm", "r4, r3, 0, 28, 31");
	WriteNormInstr("add", "r5, r6, r4");
	WriteNormInstr("subfe", "r10, r11, rFlag_x");
	WriteNormInstr("add", "r8, r5, r10");
	WriteNormInstr("rlwinm", "r7, r3, 0, 24, 27");
	WriteNormInstr("rlwinm", "r28, r30, 0, 24, 27");
	WriteNormInstr("add", "r7, r7, r28");
	WriteNormInstr("rlwinm", "r9, r8, 0, 16, 31");
	WriteNormInstr("cmpi", "cr0, r9, 10");
	WriteNormInstr("blt", "cr0,.L668");
	WriteNormInstr("addi", "r31, r8, 6");
	WriteNormInstr("rlwinm", "r9, r31, 0, 16, 31");
	WriteALocalLabel("L668");
	WriteNormInstr("add", "r8, r7, r9");
	WriteNormInstr("rlwinm", "r9, r8, 0, 16, 31");
	WriteNormInstr("rlwinm", "r4, r9, 0, 23, 27");
	WriteNormInstr("cmpi", "cr0, r4, 145");
	WriteNormInstr("subfic", "r5, r4, 144");
	WriteNormInstr("rlwinm", "rFlag_c, r5, 1, 31, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("blt", "cr0,.L672");
	WriteNormInstr("addi", "r6, r8, 96");
	WriteNormInstr("rlwinm", "r9, r6, 0, 16, 31");
	WriteALocalLabel("L672");
	WriteNormInstr("extsb.", "r3, r9");
	WriteNormInstr("mcrf", "cr7, cr0");
	WriteNormInstr("beq", "cr7,.L676");
	WriteNormInstr("addi", "rFlag_z, 0, 0");
	WriteALocalLabel("L676");
	WriteNormInstr("mfcr", "r9");
	WriteNormInstr("rlwinm", "r5, r30, 1, 31, 31");
	WriteNormInstr("mfcr", "r8");
	WriteNormInstr("rlwinm", "rFlag_n, r9, 29, 31, 31");
	WriteNormInstr("rlwinm", "r8, r8, 25, 31, 31");
	WriteNormInstr("cmp", "cr0, r5, r8");
	WriteNormInstr("beq", "cr0,.L742");
	WriteNormInstr("cmp", "cr0, rFlag_n, r8");
	WriteNormInstr("bne", "cr0,.L740");
	WriteALocalLabel("L742");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L740");
	WriteNormInstr("addi", "rFlag_v, 0, 1");
	WriteNormInstr("b", ".L701");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Sbcdr");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("addi", "r5, 0, 0");
	WriteNormInstr("rlwinm", "r6, rOpCode, 23, 29, 31");
	WriteNormInstr("mr", "r29, r5");
	WriteNormInstr("mr", "r28, r6");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("mr", "r4, r28");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteBlankLineToDestFile();
	WriteNormInstr("b", ".DoBinOpSbcd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Sbcdm");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormInstr("addi", "r5, 0, 4");
	WriteNormInstr("rlwinm", "r6, rOpCode, 23, 29, 31");
	WriteNormInstr("mr", "r29, r5");
	WriteNormInstr("mr", "r28, r6");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("mr", "r4, r28");
	WriteNormInstr("mr", "r3, r29");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteBlankLineToDestFile();
	WriteNormInstr("b", ".DoBinOpSbcd");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoBinOpSbcd");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormalAsmComment("BinOpSubBCD");
	WriteNormInstr("mfcr", "r29");
	WriteNormInstr("rlwinm", "r4, r3, 0, 28, 31");
	WriteNormInstr("cmpi", "cr6, r3, 0");
	WriteNormInstr("addic", "r12, rFlag_x, -1");
	WriteNormInstr("rlwinm", "r5, r30, 0, 28, 31");
	WriteNormInstr("subfe", "r11, r12, rFlag_x");
	WriteNormInstr("subf", "r10, r5, r4");
	WriteNormInstr("rlwinm", "r31, r3, 0, 24, 27");
	WriteNormInstr("subf", "r7, r11, r10");
	WriteNormInstr("rlwinm", "r28, r30, 0, 24, 27");
	WriteNormInstr("rlwinm", "r8, r7, 0, 16, 31");
	WriteNormInstr("cmpi", "cr0, r8, 10");
	WriteNormInstr("subf", "r6, r28, r31");
	WriteNormInstr("rlwinm", "r9, r6, 0, 16, 31");
	WriteNormInstr("blt", "cr0,.L684");
	WriteNormInstr("addi", "r28, r7, -6");
	WriteNormInstr("rlwinm", "r8, r28, 0, 16, 31");
	WriteNormInstr("addi", "r3, r6, -16");
	WriteNormInstr("rlwinm", "r9, r3, 0, 16, 31");
	WriteALocalLabel("L684");
	WriteNormInstr("rlwinm", "r5, r9, 0, 23, 27");
	WriteNormInstr("cmpi", "cr0, r5, 145");
	WriteNormInstr("subfic", "r6, r5, 144");
	WriteNormInstr("rlwinm", "r4, r8, 0, 28, 31");
	WriteNormInstr("add", "r7, r9, r4");
	WriteNormInstr("rlwinm", "rFlag_c, r6, 1, 31, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("rlwinm", "r8, r7, 0, 16, 31");
	WriteNormInstr("blt", "cr0,.L688");
	WriteNormInstr("addi", "r10, r7, -96");
	WriteNormInstr("rlwinm", "r8, r10, 0, 16, 31");
	WriteALocalLabel("L688");
	WriteNormInstr("extsb.", "r3, r8");
	WriteNormInstr("mcrf", "cr7, cr0");
	WriteNormInstr("beq", "cr7,.L692");
	WriteNormInstr("addi", "rFlag_z, 0, 0");
	WriteALocalLabel("L692");
	WriteNormInstr("mfcr", "r9");
	WriteNormInstr("rlwinm", "r5, r30, 1, 31, 31");
	WriteNormInstr("mfcr", "r8");
	WriteNormInstr("rlwinm", "rFlag_n, r9, 29, 31, 31");
	WriteNormInstr("rlwinm", "r8, r8, 25, 31, 31");
	WriteNormInstr("cmp", "cr0, r5, r8");
	WriteNormInstr("beq", "cr0,.L747");
	WriteNormInstr("cmp", "cr0, rFlag_n, r8");
	WriteNormInstr("bne", "cr0,.L745");
	WriteALocalLabel("L747");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("b", ".L701");
	WriteALocalLabel("L745");
	WriteNormInstr("addi", "rFlag_v, 0, 1");
	WriteNormInstr("b", ".L701");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Nbcd");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("rlwinm", "r10, r3, 0, 28, 31");
	WriteNormInstr("addic", "r5, rFlag_x, -1");
	WriteNormInstr("rlwinm", "r6, r3, 0, 24, 27");
	WriteNormInstr("subfe", "r4, r5, rFlag_x");
	WriteNormInstr("add", "r7, r10, r4");
	WriteNormInstr("neg", "r9, r6");
	WriteNormInstr("neg", "r8, r7");
	WriteNormInstr("rlwinm", "r9, r9, 0, 16, 31");
	WriteNormInstr("rlwinm", "r8, r8, 0, 16, 31");
	WriteNormInstr("cmpi", "cr0, r8, 10");
	WriteNormInstr("blt", "cr0,.L890");
	WriteNormInstr("subfic", "r12, r7, -6");
	WriteNormInstr("subfic", "r3, r6, -16");
	WriteNormInstr("rlwinm", "r8, r12, 0, 16, 31");
	WriteNormInstr("rlwinm", "r9, r3, 0, 16, 31");
	WriteALocalLabel("L890");
	WriteNormInstr("rlwinm", "r6, r9, 0, 23, 27");
	WriteNormInstr("cmpi", "cr0, r6, 145");
	WriteNormInstr("subfic", "r7, r6, 144");
	WriteNormInstr("rlwinm", "r4, r8, 0, 28, 31");
	WriteNormInstr("add", "r8, r9, r4");
	WriteNormInstr("rlwinm", "rFlag_c, r7, 1, 31, 31");
	WriteNormInstr("rlwinm", "r3, r8, 0, 16, 31");
	WriteNormInstr("mr", "rFlag_x, rFlag_c");
	WriteNormInstr("blt", "cr0,.L894");
	WriteNormInstr("addi", "r10, r8, -96");
	WriteNormInstr("rlwinm", "r3, r10, 0, 16, 31");
	WriteALocalLabel("L894");
	WriteNormInstr("cmpi", "cr0, rOpSize, 1");
	WriteNormInstr("bne", "cr0,.L898");
	WriteNormInstr("extsb", "r3, r3");
	WriteNormInstr("b", ".L903");
	WriteALocalLabel("L898");
	WriteNormInstr("cmpi", "cr0, rOpSize, 2");
	WriteNormInstr("bne", "cr0,.L903");
	WriteNormInstr("extsh", "r3, r3");
	WriteALocalLabel("L903");
	WriteNormInstr("cmpi", "cr0, r3, 0");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("beq", "cr0,.SetArgValue");
	WriteNormInstr("addi", "rFlag_z, 0, 0");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Rte");
	WriteNormInstr("lbz", "r30, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r30, 0");
	WriteNormInstr("bne", "cr0, .L1534");
	WriteNormInstr("addi", "r3, 0, 8");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteALocalLabel("L1534");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("bl", ".get_word");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteNormInstr("bl", ".m68k_setSR");
	WriteNormInstr("addi", "r3, r30, 2");
	WriteNormInstr("addi", "r30, r30, 6");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteNormInstr("stw", "r30, fReg_A7(rRegs)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveP");
	WriteNormInstr("rlwinm", "r3, rOpCode, 24, 31, 31");
	WriteNormInstr("rlwinm", "r5, rOpCode, 29, 29, 31");
	WriteNormInstr("rlwinm.", "r9, rOpCode, 26, 30, 31");
	WriteNormInstr("beq", "cr0,.L1062");
	WriteNormInstr("cmpi", "cr0, r9, 1");
	WriteNormInstr("beq", "cr0,.L1066");
	WriteNormInstr("cmpi", "cr0, r9, 2");
	WriteNormInstr("beq", "cr0,.L1070");
	WriteNormInstr("cmpi", "cr0, r9, 3");
	WriteNormInstr("beq", "cr0,.L1074");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1062");
	WriteNormInstr("rlwinm", "r4, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r3, r4, rRegs");
	WriteNormInstr("lwz", "r30, 32(r3)");
	WriteNormInstr("rlwinm", "r28, rOpCode, 25, 27, 29");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("add", "r30, r3, r30");
	WriteNormInstr("mr", "r3, r30");
	WriteNormInstr("bl", ".get_byte");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("mr", "r0, r3");
	WriteNormInstr("addi", "r3, r30, 2");
	WriteNormInstr("rlwinm", "r30, r0, 8, 0, 23");
	WriteNormInstr("bl", ".get_byte");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("lwzx", "r0, r28, rRegs");
	WriteNormInstr("add", "r12, r3, r30");
	WriteNormInstr("rlwimi", "r0, r12, 0, 16, 31");
	WriteNormInstr("stwx", "r0, r28, rRegs");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1066");
	WriteNormInstr("rlwinm", "r0, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r3, r0, rRegs");
	WriteNormInstr("lwz", "r30, 32(r3)");
	WriteNormInstr("rlwinm", "r28, rOpCode, 25, 27, 29");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("add", "r30, r3, r30");
	WriteNormInstr("mr", "r3, r30");
	WriteNormInstr("bl", ".get_byte");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("mr", "r0, r3");
	WriteNormInstr("addi", "r3, r30, 2");
	WriteNormInstr("rlwinm", "r29, r0, 24, 0, 7");
	WriteNormInstr("bl", ".get_byte");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("mr", "r0, r3");
	WriteNormInstr("addi", "r3, r30, 4");
	WriteNormInstr("rlwinm", "r0, r0, 16, 0, 15");
	WriteNormInstr("add", "r29, r29, r0");
	WriteNormInstr("bl", ".get_byte");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("mr", "r0, r3");
	WriteNormInstr("addi", "r3, r30, 6");
	WriteNormInstr("rlwinm", "r0, r0, 8, 0, 23");
	WriteNormInstr("add", "r30, r29, r0");
	WriteNormInstr("bl", ".get_byte");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteNormInstr("add", "r0, r30, r3");
	WriteNormInstr("stwx", "r0, r28, rRegs");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1070");
	WriteNormInstr("rlwinm", "r3, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r4, r3, rRegs");
	WriteNormInstr("rlwinm", "r12, rOpCode, 25, 27, 29");
	WriteNormInstr("lwz", "r28, 32(r4)");
	WriteNormInstr("lwzx", "r0, r12, rRegs");
	WriteNormInstr("extsh", "r31, r0");
	WriteNormInstr("srawi", "r4, r31, 8");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("add", "r28, r3, r28");
	WriteNormInstr("mr", "r3, r28");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("addi", "r3, r28, 2");
	WriteNormInstr("mr", "r4, r31");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("L1074");
	WriteNormInstr("rlwinm", "r3, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r5, r3, rRegs");
	WriteNormInstr("rlwinm", "r12, rOpCode, 25, 27, 29");
	WriteNormInstr("lwz", "r28, 32(r5)");
	WriteNormInstr("lwzx", "r31, r12, rRegs");
	WriteNormInstr("srawi", "r4, r31, 24");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("add", "r28, r3, r28");
	WriteNormInstr("mr", "r3, r28");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("addi", "r3, r28, 2");
	WriteNormInstr("srawi", "r4, r31, 16");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("addi", "r3, r28, 4");
	WriteNormInstr("srawi", "r4, r31, 8");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("addi", "r3, r28, 6");
	WriteNormInstr("mr", "r4, r31");
	WriteNormInstr("bl", ".put_byte");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Illegal");
	WriteALocalLabel("DoIKind_CallMorRtm");
	WriteALocalLabel("op_illg");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_ChkW");
	WriteNormInstr("rlwinm", "r8, rOpCode, 26, 30, 31");
	WriteBlankLineToDestFile();
	WriteAsmInstrComment("b76 in r8");
	WriteNormInstr("subfic", "rOpSize, r8, 4");
	WriteNormInstr("rlwinm", "r3, rOpCode, 29, 29, 31");
	WriteNormInstr("rlwinm", "r4, rOpCode, 0, 29, 31");
	WriteNormalAsmComment("DoCheck (r2 in opcode)");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("mr", "r29, r3");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("rlwinm", "r4, rOpCode, 23, 29, 31");
	WriteNormInstr("bl", ".DecodeModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteNormInstr("cmpi", "cr0, r3, 0");
	WriteNormInstr("bnl+", "cr0,.L1175");
	WriteNormInstr("addi", "rFlag_n, 0, 1");
	WriteNormInstr("b", ".B2LEP9821");
	WriteALocalLabel("L1175");
	WriteNormInstr("cmp", "cr0, r3, r29");
	WriteNormInstr("bng+", "cr0,.m68k_NextInstruction");
	WriteNormInstr("addi", "rFlag_n, 0, 0");
	WriteALocalLabel("B2LEP9821");
	WriteNormInstr("addi", "r3, 0, 6");
	WriteNormInstr("b", ".ExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Trap");
	WriteNormInstr("rlwinm", "r3, rOpCode, 0, 28, 31");
	WriteNormInstr("addi", "r3, r3, 32");
	WriteNormInstr("b", ".ExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_TrapV");
	WriteNormInstr("cmpi", "cr0, rFlag_v, 0");
	WriteNormInstr("beq", "cr0, .m68k_NextInstruction");
	WriteNormInstr("addi", "r3, 0, 7");
	WriteNormInstr("b", ".ExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Rtr");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("bl", ".get_word");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteNormInstr("bl", ".m68k_setCR");
	WriteNormInstr("addi", "r3, r30, 2");
	WriteNormInstr("addi", "r30, r30, 6");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteNormInstr("stw", "r30, fReg_A7(rRegs)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveRUSP");
	WriteNormInstr("lbz", "r0, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r0, 0");
	WriteNormInstr("bne", "cr0, .L1493");
	WriteNormInstr("addi", "r3, 0, 8");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteALocalLabel("L1493");
	WriteNormInstr("rlwinm", "r30, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r3, r30, rRegs");
	WriteNormInstr("lwz", "r4, 32(r3)");
	WriteNormInstr("stw", "r4, fReg_usp(rRegs)");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_MoveUSPR");
	WriteNormInstr("lbz", "r5, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r5, 0");
	WriteNormInstr("bne", "cr0, .L1502");
	WriteNormInstr("addi", "r3, 0, 8");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteALocalLabel("L1502");
	WriteNormInstr("lwz", "r4, fReg_usp(rRegs)");
	WriteNormInstr("rlwinm", "r30, rOpCode, 2, 27, 29");
	WriteNormInstr("add", "r3, r30, rRegs");
	WriteNormInstr("stw", "r4, 32(r3)");
	WriteNormInstr("b", ".m68k_NextInstruction");
}

#pragma segment ASMgen6

LOCALPROC WritePPCasmMINEM68K6(void)
{
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Tas");
	WriteNormInstr("addi", "rOpSize, 0, 1");
	WriteNormInstr("bl", ".DecodeNormModeRegister");
	WriteNormInstr("bl", ".GetArgValue");
	WriteBlankLineToDestFile();
	WriteNormInstr("cntlzw", "r4, r3");
	WriteNormInstr("addi", "rFlag_c, 0, 0");
	WriteNormInstr("addi", "rFlag_v, 0, 0");
	WriteNormInstr("rlwinm", "rFlag_n, r3, 1, 31, 31");
	WriteNormInstr("rlwinm", "rFlag_z, r4, 27, 5, 31");
	WriteNormInstr("ori", "r3, r3, 128");
	WriteNormInstr("b", ".SetArgValue");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_F");
	WriteNormInstr("addi", "r3, 0, 11");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Stop");
	WriteNormInstr("lbz", "r30, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r30, 0");
	WriteNormInstr("bne", "cr0, .L1525");
	WriteNormInstr("addi", "r3, 0, 8");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteALocalLabel("L1525");
	WriteNormInstr("lhzu", "r3, 2(rPC_p)");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteNormInstr("bl", ".m68k_setSR");
	WriteNormInstr("b", ".m68k_setstopped");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("m68k_setstopped");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("b", ".ExceptionAndNext");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("ReadInterruptPriorityLevel");
	WriteNormInstr("lwz", "r11,fIPL(rRegs)");
	WriteNormInstr("lbz", "r3,0x0000(r11)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoCheckExternalInterruptPending");
	WriteNormInstr("bl", ".ReadInterruptPriorityLevel");
	WriteNormInstr("lwz", "r5, fReg_intmask(rRegs)");
	WriteNormInstr("mr", "r31, r3");
	WriteNormInstr("cmp", "cr1, r31, r5");
	WriteNormInstr("bgt", "cr1, .L119");
	WriteNormInstr("cmpi", "cr0, r31, 7");
	WriteNormInstr("bne", "cr0, .B2end9967");
	WriteALocalLabel("L119");
	WriteNormInstr("addi", "r3, r31, 24");
	WriteNormInstr("bl", ".Exception");
	WriteNormInstr("stw", "r31, fReg_intmask(rRegs)");
	WriteALocalLabel("B2end9967");
	WriteNormInstr("addi", "r12, 0, 0");
	WriteNormInstr("stb", "r12, fReg_ExtIntPend(rRegs)");
	WriteNormInstr("b", ".AfterCheckExternalInterruptPending");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("do_trace");
	WriteNormInstr("addi", "r3, 0, 1");
	WriteNormInstr("stb", "r3, fReg_TracePend(rRegs)");
	WriteNormInstr("bl", ".NeedToGetOut");
	WriteNormInstr("b", ".AfterDoTrace");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoPendingTrace");
	WriteNormInstr("addi", "r3, 0, 9");
	WriteNormInstr("bl", ".Exception");
	WriteNormInstr("b", ".AfterDoPendingTrace");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("MyEmulatorTempLeave");
	WriteNormInstr("stw", "rMaxInstrsToGo, fReg_MaxInstrs(rRegs)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("MyEmulatorTempReturn");
	WriteNormalAsmComment("must leave r3 unchanged");
	WriteNormInstr("lwz", "rMaxInstrsToGo, fReg_MaxInstrs(rRegs)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("MyEmulatorEntry");
	WriteLoadVarAddr("rRegs", "b2regs9999");
	WriteLoadVarAddr("rDispatches", "Dispatches");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "rMaxInstrsToGo, fReg_MaxInstrs(rRegs)");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "rPC_p, fReg_pc_p(rRegs)");
	WriteNormInstr("lbz", "rFlag_c, fReg_c(rRegs)");
	WriteNormInstr("lbz", "rFlag_z, fReg_z(rRegs)");
	WriteNormInstr("lbz", "rFlag_n, fReg_n(rRegs)");
	WriteNormInstr("lbz", "rFlag_v, fReg_v(rRegs)");
	WriteNormInstr("lbz", "rFlag_x, fReg_x(rRegs)");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "rBankReadAddr, fBankReadAddr(rRegs)");
	WriteNormInstr("lwz", "rBankWritAddr, fBankWritAddr(rRegs)");
	WriteBlankLineToDestFile();
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("MyEmulatorExit");
	WriteNormInstr("stb", "rFlag_x, fReg_x(rRegs)");
	WriteNormInstr("stb", "rFlag_v, fReg_v(rRegs)");
	WriteNormInstr("stb", "rFlag_n, fReg_n(rRegs)");
	WriteNormInstr("stb", "rFlag_z, fReg_z(rRegs)");
	WriteNormInstr("stb", "rFlag_c, fReg_c(rRegs)");
	WriteNormInstr("stw", "rPC_p, fReg_pc_p(rRegs)");
	WriteNormInstr("stw", "rMaxInstrsToGo, fReg_MaxInstrs(rRegs)");
	WriteBlankLineToDestFile();
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("DoIKind_Reset");
	WriteNormInstr("lbz", "r10, fReg_s(rRegs)");
	WriteNormInstr("cmpi", "cr0, r10, 0");
	WriteNormInstr("bne", "cr0, .L1514");
	WriteNormInstr("addi", "r3, 0, 8");
	WriteNormInstr("b", ".BackupExceptionAndNext");
	WriteALocalLabel("L1514");
	WriteNormInstr("bl", ".MyEmulatorExit");
	CallImportedProc("customreset");
	WriteNormInstr("bl", ".MyEmulatorEntry");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteBlankLineToDestFile();
	WriteNormalAsmComment("variables that may be changed during MM_Access");
	WriteAsmInstrComment("regs.ExternalInterruptPending");
	WriteAsmInstrComment("regs.intmask");
	WriteAsmInstrComment("MoreInstructionsToGo");
	WriteAsmInstrComment("MaxInstructionsToGo");
	WriteAsmInstrComment("VIAInterruptRequest");
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_byte_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("bl", ".MyEmulatorTempLeave");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r6, r3");
		WriteAsmIndentComment("addr");
	WriteNormInstr("addi", "r5, 0, 1");
		WriteAsmIndentComment("ByteSize");
	WriteNormInstr("addi", "r4, 0, 0");
		WriteAsmIndentComment("WriteMem");
	WriteNormInstr("addi", "r3, 0, 0");
		WriteAsmIndentComment("Data");
	CallImportedProc("MM_Access");
	WriteNormInstr("rlwinm", "r3, r3, 0, 24, 31");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorTempReturn");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("extsb", "r3, r3");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("put_byte_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("bl", ".MyEmulatorTempLeave");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r6, r3");
		WriteAsmIndentComment("addr");
	WriteNormInstr("addi", "r5, 0, 1");
		WriteAsmIndentComment("ByteSize");
	WriteNormInstr("rlwinm", "r3, r4, 0, 24, 31");
		WriteAsmIndentComment("Data");
	WriteNormInstr("addi", "r4, 0, 1");
		WriteAsmIndentComment("WriteMem");
	CallImportedProc("MM_Access");
	WriteNormInstr("bl", ".MyEmulatorTempReturn");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_word_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("bl", ".MyEmulatorTempLeave");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r6, r3");
		WriteAsmIndentComment("addr");
	WriteNormInstr("addi", "r5, 0, 0");
		WriteAsmIndentComment("ByteSize");
	WriteNormInstr("addi", "r4, 0, 0");
		WriteAsmIndentComment("WriteMem");
	WriteNormInstr("addi", "r3, 0, 0");
		WriteAsmIndentComment("Data");
	CallImportedProc("MM_Access");
	WriteNormInstr("rlwinm", "r3, r3, 0, 16, 31");
	WriteNormInstr("extsh", "r3, r3");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorTempReturn");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("put_word_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("bl", ".MyEmulatorTempLeave");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r6, r3");
		WriteAsmIndentComment("addr");
	WriteNormInstr("addi", "r5, 0, 0");
		WriteAsmIndentComment("ByteSize");
	WriteNormInstr("rlwinm", "r3, r4, 0, 16, 31");
		WriteAsmIndentComment("Data");
	WriteNormInstr("addi", "r4, 0, 1");
		WriteAsmIndentComment("WriteMem");
	CallImportedProc("MM_Access");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorTempReturn");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_long_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "r30, -8(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("mr", "r31, r3");
	WriteNormInstr("bl", ".get_word");
	WriteNormInstr("mr", "r30, r3");
	WriteNormInstr("addi", "r3, r31, 2");
	WriteNormInstr("bl", ".get_word");
	WriteNormInstr("rlwimi", "r3, r30, 16, 0, 15");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "r30, -8(sp)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("put_long_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "r30, -8(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("mr", "r30, r4");
	WriteNormInstr("mr", "r31, r3");
	WriteNormInstr("rlwinm", "r4, r30, 16, 16, 31");
	WriteNormInstr("bl", ".put_word");
	WriteNormInstr("addi", "r3, r31, 2");
	WriteNormInstr("rlwinm", "r4, r30, 0, 16, 31");
	WriteNormInstr("bl", ".put_word");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "r30, -8(sp)");
	WrOpPPC_blr();
	WriteBlankLineToDestFile();
	WriteBlankLineToDestFile();
	WriteALocalLabel("get_pc_real_address_ext");
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteNormInstr("bl", ".MyEmulatorTempLeave");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r5, r3");
		WriteAsmIndentComment("addr");
	WriteNormInstr("addi", "r4, 0, 0");
		WriteAsmIndentComment("WritableMem");
	WriteNormInstr("addi", "r3, 0, 2");
		WriteAsmIndentComment("L");
	WriteBlankLineToDestFile();
	CallImportedProc("get_real_address");
	WriteNormInstr("mr", "rPC_p, r3");
		WriteAsmIndentComment("addr");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorTempReturn");
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WriteBlankLineToDestFile();
	WriteNormInstr("cmpi", "cr0, rPC_p, 0");
	WriteNormInstr("bne+", "cr0, .end_get_pc_real_address");
	WriteNormInstr("lwz", "rPC_p, 0(rBankReadAddr)");
	WriteNormInstr("b", ".end_get_pc_real_address");

	WriteAGlobalLabel("m68k_IPLchangeNtfy", 2);
	WriteLoadVarAddr("r6", "b2regs9999");
	WriteNormInstr("lwz", "r11, fIPL(r6)");
	WriteNormInstr("lwz", "r4, fReg_intmask(r6)");
	WriteNormInstr("lbz", "r3, 0x0000(r11)");
	WriteNormInstr("cmp", "cr1, r3, r4");
	WriteNormInstr("bgt", "cr1, .L126");
	WriteNormInstr("cmpi", "cr0, r3, 7");
	WriteNormInstr("bnelr", "cr0");
	WriteALocalLabel("L126");
	WriteNormInstr("lwz", "r12, fReg_MaxInstrs(r6)");
	WriteNormInstr("addi", "r3, 0, 1");
	WriteNormInstr("stb", "r3, fReg_ExtIntPend(r6)");
	WriteNormInstr("cmpi", "cr0, r12, 0");
	WriteNormInstr("beqlr", "cr0");
	WriteNormInstr("lwz", "r3, fReg_MoreInstrs(r6)");
	WriteNormInstr("addi", "r4, 0, 1");
	WriteNormInstr("stw", "r4, fReg_MaxInstrs(r6)");
	WriteNormInstr("add", "r3, r3, r12");
	WriteNormInstr("addi", "r3, r3, -1");
	WriteNormInstr("stw", "r3, fReg_MoreInstrs(r6)");
	WrOpPPC_blr();

	WriteAGlobalLabel("GetInstructionsRemaining", 2);
	WriteLoadVarAddr("r6", "b2regs9999");
	WriteNormInstr("lwz", "r3,fReg_MoreInstrs(r6)");
	WriteNormInstr("lwz", "r5,fReg_MaxInstrs(r6)");
	WriteNormInstr("add", "r3,r3,r5");
	WrOpPPC_blr();

	WriteAGlobalLabel("SetInstructionsRemaining", 2);
	WriteLoadVarAddr("r6", "b2regs9999");
	WriteNormInstr("lwz", "r5,fReg_MaxInstrs(r6)");
	WriteNormInstr("cmplw", "r5,r3");
	WriteNormInstr("blt", ".L1_SetInstructionsRemaining");
	WriteNormInstr("li", "r0,0");
	WriteNormInstr("stw", "r3,fReg_MaxInstrs(r6)");
	WriteNormInstr("stw", "r0,fReg_MoreInstrs(r6)");
	WrOpPPC_blr();
	WriteALocalLabel("L1_SetInstructionsRemaining");
	WriteNormInstr("sub", "r4,r3,r5");
	WriteNormInstr("stw", "r4,fReg_MoreInstrs(r6)");
	WrOpPPC_blr();

	WriteAGlobalLabel("DiskInsertedPsuedoException", 2);
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "rPC_p, -76(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -144(sp)");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorEntry");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "r31, r4");
	WriteNormInstr("bl", ".ExceptionTo");
	WriteNormInstr("lwz", "r3, fReg_A7(rRegs)");
	WriteNormInstr("mr", "r4, r31");
	WriteNormInstr("addi", "r3, r3, -4");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteNormInstr("bl", ".put_long");
	WriteNormInstr("bl", ".MyEmulatorExit");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "r0, 152(sp)");
	WriteNormInstr("addi", "sp, sp, 144");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "rPC_p, -76(sp)");
	WrOpPPC_blr();

	WriteAGlobalLabel("m68k_reset", 2);
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "rPC_p, -76(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -144(sp)");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorEntry");
	WriteBlankLineToDestFile();
	WriteNormInstr("addi", "r30, 0, 0");
	WriteNormInstr("addi", "r29, 0, 7");
	WriteNormInstr("addi", "r28, 0, 1");
	WriteNormInstr("addi", "r3, 0, 4");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("bl", ".m68k_setpc");
	WriteNormInstr("addi", "r3, 0, 0");
	WriteNormInstr("bl", ".get_long");
	WriteNormInstr("stw", "r3, fReg_A7(rRegs)");
	WriteNormInstr("stb", "r28, fReg_s(rRegs)");
	WriteAsmInstrComment("stb\tr30, fReg_m(rRegs)");
	WriteNormInstr("stb", "r30, fReg_t1(rRegs)");
	WriteNormInstr("mr", "rFlag_v, r30");
	WriteNormInstr("mr", "rFlag_n, r30");
	WriteNormInstr("mr", "rFlag_c, r30");
	WriteNormInstr("mr", "rFlag_z, r30");
	WriteNormInstr("stb", "r30, fReg_ExtIntPend(rRegs)");
	WriteNormInstr("stb", "r30, fReg_TracePend(rRegs)");
	WriteNormInstr("stw", "r29, fReg_intmask(rRegs)");
	WriteALocalLabel("B2end9963");
	WriteALocalLabel("B2LEP9962");
	WriteNormInstr("bl", ".MyEmulatorExit");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "r0, 152(sp)");
	WriteNormInstr("addi", "sp, sp, 144");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "rPC_p, -76(sp)");
	WrOpPPC_blr();

	WriteAGlobalLabel("MINEM68K_Init", 2);
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -64(sp)");
	WriteBlankLineToDestFile();
	WriteLoadVarAddr("r9", "b2regs9999");
	WriteNormInstr("stw", "r3, fBankReadAddr(r9)");
	WriteNormInstr("stw", "r4, fBankWritAddr(r9)");
	WriteNormInstr("stw", "r5, fIPL(r9)");
	WriteBlankLineToDestFile();
	WriteNormInstr("addi", "r3, r9, fdisp_table");
	CallImportedProc("M68KITAB_setup");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "r0, 72(sp)");
	WriteNormInstr("addi", "sp, sp, 64");
	WriteNormInstr("mtlr", "r0");
	WrOpPPC_blr();

	WriteAGlobalLabel("m68k_go_nInstructions", 2);
	WriteNormInstr("mflr", "r0");
	WriteNormInstr("stmw", "rPC_p, -76(sp)");
	WriteNormInstr("stw", "r0, 8(sp)");
	WriteNormInstr("stwu", "sp, -144(sp)");
	WriteBlankLineToDestFile();
	WriteNormInstr("bl", ".MyEmulatorEntry");
	WriteBlankLineToDestFile();
	WriteNormInstr("mr", "rMaxInstrsToGo, r3");
	WriteNormInstr("addi", "r12, 0, 0");
	WriteNormInstr("stw", "r12, fReg_MoreInstrs(rRegs)");
	WriteALocalLabel("B2LP_9657");
	WriteBlankLineToDestFile();
	WriteNormInstr("lbz", "r0, fReg_ExtIntPend(rRegs)");
	WriteNormInstr("cmpi", "cr0, r0, 0");
	WriteNormInstr("bne", "cr0,.DoCheckExternalInterruptPending");
	WriteALocalLabel("AfterCheckExternalInterruptPending");
	WriteNormInstr("lbz", "r0, fReg_TracePend(rRegs)");
	WriteNormInstr("cmpi", "cr0, r0, 0");
	WriteNormInstr("bne", "cr0,.DoPendingTrace");
	WriteALocalLabel("AfterDoPendingTrace");
	WriteNormInstr("lbz", "r0, fReg_t1(rRegs)");
	WriteNormInstr("cmpi", "cr0, r0, 0");
	WriteNormInstr("bne", "cr0,.do_trace");
	WriteALocalLabel("AfterDoTrace");
	WriteBlankLineToDestFile();
	WriteNormInstr("addi", "rMaxInstrsToGo, rMaxInstrsToGo, 1");
	WriteNormInstr("b", ".m68k_NextInstruction");
	WriteALocalLabel("after_m68k_go_MaxInstructions");
	WriteNormInstr("addi", "rPC_p, rPC_p, -2");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "r0, fReg_MoreInstrs(rRegs)");
	WriteNormInstr("addi", "r12, 0, 0");
	WriteNormInstr("mr", "rMaxInstrsToGo, r0");
	WriteNormInstr("cmpi", "cr0, r0, 0");
	WriteNormInstr("stw", "r12, fReg_MoreInstrs(rRegs)");
	WriteNormInstr("bne", "cr0,.B2LP_9657");
	WriteNormInstr("bl", ".MyEmulatorExit");
	WriteBlankLineToDestFile();
	WriteNormInstr("lwz", "r0, 152(sp)");
	WriteNormInstr("addi", "sp, sp, 144");
	WriteNormInstr("mtlr", "r0");
	WriteNormInstr("lmw", "rPC_p, -76(sp)");
	WrOpPPC_blr();
}

LOCALPROC WritePPCasmMINEM68K(void)
{
	if (HaveAsm) {
		if (WriteOpenDestFile(&SrcDirR, "MINEM68K", ".s")) {
			WritePPCasmMINEM68K0();
			WritePPCasmMINEM68K1();
			WritePPCasmMINEM68K2();
			WritePPCasmMINEM68K3();
			WritePPCasmMINEM68K4();
			WritePPCasmMINEM68K5();
			WritePPCasmMINEM68K6();
			WriteCloseDestFile();
		}
	}
}
