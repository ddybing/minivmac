/*
	WRMPWFLS.i
	Copyright (C) 2007 Paul C. Pratt

	You can redistribute this file and/or modify it under the terms
	of version 2 of the GNU General Public License as published by
	the Free Software Foundation.  You should have received a copy
	of the license along with this file; see the file COPYING.

	This file is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	license for more details.
*/

/*
	WRite Macintosh Programmer's Workshop specific FiLes
*/


#pragma segment MPWSupport

LOCALPROC DoSrcFileMPWMakeCompileBody(void)
{
	blnr IsAsmFile = HaveAsm && ((DoSrcFile_gd()->Flgm & kCSrcFlgmAsmAvail) != 0);

	WriteBgnDestFileLn();
	if (IsAsmFile) {
		WriteCStrToDestFile("{mk_CallA} ");
	} else {
		WriteCStrToDestFile("{mk_CallC} ");
	}
	WriteQuoteToDestFile();
	WriteSrcFileFilePath();
	WriteQuoteToDestFile();
	WriteCStrToDestFile(" -o ");
	WriteQuoteToDestFile();
	WriteSrcFileObjPath();
	WriteQuoteToDestFile();
	if (! IsAsmFile) {
		WriteCStrToDestFile(" {mk_COptions}");
	}
	WriteEndDestFileLn();
}

static void DoSrcFileMPWMakeCompile(void)
{
	WriteMakeRule(WriteSrcFileObjPath,
		DoSrcFileMakeCompileDeps,
		DoSrcFileMPWMakeCompileBody);
}

LOCALPROC DoSrcFileMPWMakeObjects(void)
{
	WriteBgnDestFileLn();
	WriteQuoteToDestFile();
	WriteSrcFileObjPath();
	WriteQuoteToDestFile();
	WriteCStrToDestFile(" \266");
	WriteEndDestFileLn();
}

static void WriteMPWCOptions(blnr fast)
{
	if (gbo_cpufam == gbk_cpufam_68k) {
		WriteCStrToDestFile(" -proto strict -w 17 -align mac68k -b");
		if (cur_targ == gbk_targ_mfpu) {
			WriteCStrToDestFile(" -mc68020 -mc68881 -elems881");
		}
		if (gbo_dbg == gbk_dbg_off) {
			WriteCStrToDestFile(" -mbg off");
		}
		WriteCStrToDestFile(" -model farCode");
	} else if (gbo_cpufam == gbk_cpufam_ppc) {
		WriteCStrToDestFile(" -proto strict -w 17");
		if (gbo_dbg != gbk_dbg_off) {
			WriteCStrToDestFile(" -traceback");
		}
	}
	if (gbo_dbg != gbk_dbg_on) {
		if (fast) {
			if (gbo_cpufam == gbk_cpufam_68k) {
				WriteCStrToDestFile(" -opt speed");
			} else if (gbo_cpufam == gbk_cpufam_ppc) {
				WriteCStrToDestFile(" -opt speed");
			}
		} else {
			if (gbo_cpufam == gbk_cpufam_68k) {
				WriteCStrToDestFile(" -opt space");
			} else if (gbo_cpufam == gbk_cpufam_ppc) {
				WriteCStrToDestFile(" -opt size");
				/* this may not be reliable? */
			}
		}
	}
}

LOCALPROC WriteMainRsrcObjDeps(void)
{
	WriteMakeDependFile(WriteMainRsrcSrcPath);
}

LOCALPROC WriteMainRsrcObjMPWbody(void)
{
	WriteBgnDestFileLn();
	WriteCStrToDestFile("Rez -t rsrc -c RSED -i \"{RIncludes}\" \"");
	WriteMainRsrcSrcPath();
	WriteCStrToDestFile("\" -o \"");
	WriteMainRsrcObjPath();
	WriteCStrToDestFile("\"");
	WriteEndDestFileLn();
}

static void WriteMPWSpecificFiles(void)
{
	if (HaveMacBundleApp) {
		WritePListData();
	}

	if (WriteOpenDestFile(&OutputDirR, "Makefile", "")) { /* Make file */

	WriteDestFileLn("# make file generated by gryphel build system");

	WriteBlankLineToDestFile();
	if (HaveAsm) {
		WriteDestFileLn("mk_CallA = PPCAsm");
		WriteDestFileLn("mk_AOptions = ");
	}
	if (gbo_cpufam == gbk_cpufam_68k) {
		WriteDestFileLn("mk_CallC = SC");
	} else if (gbo_cpufam == gbk_cpufam_ppc) {
		WriteDestFileLn("mk_CallC = MrC");
	}

	WriteBgnDestFileLn();
	WriteCStrToDestFile("mk_COptions =");
	WriteMPWCOptions(falseblnr);
	WriteEndDestFileLn();
	WriteBlankLineToDestFile();

	WriteBlankLineToDestFile();
	WriteBgnDestFileLn();
	WriteCStrToDestFile("TheDefaultOutput \304");
	if (CurPackageOut) {
		WriteMakeDependFile(WriteAppBinZipPath);
	} else {
		WriteMakeDependFile(Write_machobinpath_ToDestFile);
	}
	WriteEndDestFileLn();

	WriteBlankLineToDestFile();
	DoAllSrcFilesWithSetup(DoSrcFileMPWMakeCompile);
	WriteBlankLineToDestFile();
	WriteDestFileLn("ObjFiles = \266");
	++DestFileIndent;
		DoAllSrcFilesWithSetup(DoSrcFileMPWMakeObjects);
		WriteBlankLineToDestFile();
	--DestFileIndent;

	if (HaveMacBundleApp) {
		WriteBlankLineToDestFile();
		WriteMakeRule(Write_machoAppIconPath,
			Write_tmachoShellDeps,
			Write_tmachoShell);
	}

	WriteBlankLineToDestFile();
	WriteBgnDestFileLn();
	WriteCStrToDestFile("\"");
	Write_machobinpath_ToDestFile();
	WriteCStrToDestFile("\" \304");
	WriteCStrToDestFile(" {ObjFiles}");
	if (HaveMacBundleApp) {
		WriteMakeDependFile(Write_machoAppIconPath);
	} else {
		WriteMakeDependFile(WriteMainRsrcObjPath);
	}
	WriteEndDestFileLn();
	++DestFileIndent;
		if (HaveMacRrscs) {
			WriteBgnDestFileLn();
			WriteCStrToDestFile("Duplicate -y \"");
			WriteMainRsrcObjPath();
			WriteCStrToDestFile("\" \"");
			Write_machobinpath_ToDestFile();
			WriteCStrToDestFile("\"");
			WriteEndDestFileLn();
		}

		WriteBgnDestFileLn();
			if (gbo_cpufam == gbk_cpufam_68k) {
				WriteCStrToDestFile("Link");
				if (gbo_dbg == gbk_dbg_off) {
					WriteCStrToDestFile(" -rn");
				}
				WriteCStrToDestFile(" -model far -srtsg all -sg Main=STDCLIB,SANELIB,CSANELib,SADEV,STDIO");
			} else if (gbo_cpufam == gbk_cpufam_ppc) {
				WriteCStrToDestFile("PPCLink");
			}

			if (cur_targ == gbk_targ_carb) {
				WriteCStrToDestFile(" -m main");
			}
			WriteCStrToDestFile(" -t APPL -c ");
			WriteCStrToDestFile(kMacCreatorSig);
			WriteCStrToDestFile(" \266");
		WriteEndDestFileLn();

		++DestFileIndent;
			WriteBgnDestFileLn();
			WriteCStrToDestFile("-o \"");
			Write_machobinpath_ToDestFile();
			WriteCStrToDestFile("\" \266");
			WriteEndDestFileLn();

			if (cur_targ == gbk_targ_carb) {
				WriteDestFileLn("\"{SharedLibraries}CarbonLib\" \266");
#if UseOpenGLinOSX
				WriteDestFileLn("\"{SharedLibraries}OpenGLLibraryStub\" \266");
#endif
				WriteDestFileLn("\"{PPCLibraries}PPCToolLibs.o\" \266");
				WriteDestFileLn("\"{PPCLibraries}PPCCRuntime.o\" \266");
				WriteDestFileLn("\"{SharedLibraries}StdCLib\" \266");
			} else if (cur_targ == gbk_targ_mppc) {
				WriteDestFileLn("\"{PPCLibraries}PPCToolLibs.o\" \266");
				WriteDestFileLn("\"{PPCLibraries}PPCCRuntime.o\" \266");
				WriteDestFileLn("\"{PPCLibraries}StdCRuntime.o\" \266");
				WriteDestFileLn("\"{SharedLibraries}InterfaceLib\" \266");
				WriteDestFileLn("\"{SharedLibraries}MathLib\" \266");
				WriteDestFileLn("\"{SharedLibraries}StdCLib\" \266");
				WriteDestFileLn("-weaklib AppearanceLib \266");
				WriteDestFileLn("\"{SharedLibraries}AppearanceLib\" \266");
				WriteDestFileLn("-weaklib MenusLib \266");
				WriteDestFileLn("\"{SharedLibraries}MenusLib\" \266");
				WriteDestFileLn("-weaklib NavigationLib \266");
				WriteDestFileLn("\"{SharedLibraries}NavigationLib\" \266");
				WriteDestFileLn("-weaklib DragLib \266");
				WriteDestFileLn("\"{SharedLibraries}DragLib\" \266");
				WriteDestFileLn("-weaklib WindowsLib \266");
				WriteDestFileLn("\"{SharedLibraries}WindowsLib\" \266");
			} else if (cur_targ == gbk_targ_m68k) {
				WriteDestFileLn("\"{Libraries}Interface.o\" \266");
				WriteDestFileLn("\"{Libraries}MacRuntime.o\" \266");
				/* WriteDestFileLn("\"{Libraries}MathLib.o\" \266"); */
				WriteDestFileLn("\"{Libraries}Navigation.o\" \266");
			} else if (cur_targ == gbk_targ_mfpu) {
				WriteDestFileLn("\"{Libraries}Interface.o\" \266");
				WriteDestFileLn("\"{Libraries}MacRuntime.o\" \266");
				/* WriteDestFileLn("\"{Libraries}MathLib881.o\" \266"); */
				WriteDestFileLn("\"{Libraries}Navigation.o\" \266");
			}

			WriteDestFileLn("{ObjFiles}");
		--DestFileIndent;

		WriteBgnDestFileLn();
		WriteCStrToDestFile("SetFile -d . -m .");
		if (! HaveMacBundleApp) {
			WriteCStrToDestFile(" -a B");
		}
		WriteCStrToDestFile(" \"");
		Write_machobinpath_ToDestFile();
		WriteCStrToDestFile("\"");
		WriteEndDestFileLn();
	--DestFileIndent;

	if (HaveMacRrscs) {
		WriteBlankLineToDestFile();
		WriteMakeRule(WriteMainRsrcObjPath,
			WriteMainRsrcObjDeps, WriteMainRsrcObjMPWbody);
	}

	if (CurPackageOut) {
		WriteBlankLineToDestFile();
		WriteBgnDestFileLn();
		WriteCStrToDestFile("\"");
		WriteAppBinZipPath();
		WriteCStrToDestFile("\" \304");
		WriteMakeDependFile(Write_machobinpath_ToDestFile);
		WriteEndDestFileLn();
		++DestFileIndent;
			WriteBgnDestFileLn();
			WriteCStrToDestFile("Rename");
			WritePathArgInMakeCmnd(WriteAppNamePath);
			WritePathArgInMakeCmnd(WriteAppUnabrevPath);
			WriteEndDestFileLn();

			WriteBgnDestFileLn();
			WriteCStrToDestFile("minisit");
			WritePathArgInMakeCmnd(WriteAppBinSitPath);
			WritePathArgInMakeCmnd(WriteAppUnabrevPath);
			WriteEndDestFileLn();

			WriteBgnDestFileLn();
			WriteCStrToDestFile("Rename");
			WritePathArgInMakeCmnd(WriteAppUnabrevPath);
			WritePathArgInMakeCmnd(WriteAppNamePath);
			WriteEndDestFileLn();

			WriteBgnDestFileLn();
			WriteCStrToDestFile("minizip");
			WritePathArgInMakeCmnd(WriteAppBinZipPath);
			WritePathArgInMakeCmnd(WriteAppBinSitPath);
			WriteEndDestFileLn();

			WriteRmFile(WriteAppBinSitPath);

			WriteBgnDestFileLn();
			WriteCStrToDestFile("minimd5 <");
			WritePathArgInMakeCmnd(WriteAppBinZipPath);
			WriteCStrToDestFile(" >");
			WritePathArgInMakeCmnd(WriteCheckSumFilePath);
			WriteEndDestFileLn();

			WriteBgnDestFileLn();
			WriteCStrToDestFile("Echo -n \" ");
			WriteAppBinZipName();
			WriteCStrToDestFile("\" >>");
			WritePathArgInMakeCmnd(WriteCheckSumFilePath);
			WriteEndDestFileLn();
		--DestFileIndent;
	}

	WriteBlankLineToDestFile();
	WriteDestFileLn("clean \304");
	++DestFileIndent;
		WriteDestFileLn("Delete -i {ObjFiles}");
		if (HaveMacBundleApp) {
			WriteRmDir(WriteAppNamePath);
		} else {
			WriteRmFile(WriteAppNamePath);
			WriteRmFile(WriteMainRsrcObjPath);
		}

		if (CurPackageOut) {
			WriteRmFile(WriteAppBinZipPath);
			WriteRmFile(WriteCheckSumFilePath);
		}
	--DestFileIndent;
	WriteBlankLineToDestFile();

	WriteCloseDestFile();
	}
}
